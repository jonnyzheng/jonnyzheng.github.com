<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/3.3.1" created="2012-04-27 04:03" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.1/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.1/"
>

<channel>
	<title>路旁一棵葱</title>
	<link>http://www.jonnyzheng.com</link>
	<description>I&#039;m an idealist, not perfectionist</description>
	<pubDate>Fri, 27 Apr 2012 04:03:08 +0000</pubDate>
	<language>en</language>
	<wp:wxr_version>1.1</wp:wxr_version>
	<wp:base_site_url>http://www.jonnyzheng.com</wp:base_site_url>
	<wp:base_blog_url>http://www.jonnyzheng.com</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login>jonny</wp:author_login><wp:author_email>mars131@gmail.com</wp:author_email><wp:author_display_name><![CDATA[jonny]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>


	<generator>http://wordpress.org/?v=3.3.1</generator>

	<item>
		<title>多维数组指针问题</title>
		<link>http://www.jonnyzheng.com/?p=14</link>
		<pubDate>Sun, 12 Jun 2011 03:01:16 +0000</pubDate>
		<dc:creator>jonny</dc:creator>
		<guid isPermaLink="false">http://www.jonnyzheng.com/?p=14</guid>
		<description></description>
		<content:encoded><![CDATA[一站式编程里的题目:

&nbsp;

定义以下变量：

[cc lang="c"]
char a[4][3][2] = {{{'a', 'b'}, {'c', 'd'}, {'e', 'f'}},
{{'g', 'h'}, {'i', 'j'}, {'k', 'l'}},
{{'m', 'n'}, {'o', 'p'}, {'q', 'r'}},
{{'s', 't'}, {'u', 'v'}, {'w', 'x'}}};

char (*pa)[2] = &amp;a[1][0];
char (*ppa)[3][2] = &amp;a[1];

[/cc]

要想通过pa 或ppa 访问数组a 中的'r' 元素，分别应该怎么写？

&nbsp;

&nbsp;

&nbsp;

代码如下：
[cc lang="c"]
#include &lt;stdio.h&gt;

int main(void)
{
char a[4][3][2] = {{{'a', 'b'}, {'c', 'd'}, {'e', 'f'}},
{{'g', 'h'}, {'i', 'j'}, {'k', 'l'}},
{{'m', 'n'}, {'o', 'p'}, {'q', 'r'}},
{{'s', 't'}, {'u', 'v'}, {'w', 'x'}}};

char (*pa)[2] = &amp;a[1][0];
char (*ppa)[3][2] = &amp;a[1];
pa=pa+5;
ppa++;
printf("pa now is %c\n",pa[0][1]);
printf("ppa now is %c\n",ppa[0][2][1]);

return 0;
}
[/cc]

&nbsp;

解释:

&nbsp;

1.首先说
[cc lang="c"]
char (*pa)[2] = &amp;a[1][0];
[/cc]
char (*pa)[2] 意思是 含有两个类型是char元素的数组的数组指针，&amp;a[1][0]则代表 数组a中第二行第一组的首地址，赋值后pa将地址指向了 {'g','h'} 数组，那么如果要到{q,r}我们只要指针的地址指到{q,r}数组的首地址就可以了，将pa+5移动了指针指向的地址。

&nbsp;

最后打印r
[cc lang="c"]printf("pa now is %c\n",pa[0][1]);[/cc]
pa[0][1] 表示访问这个数组中的第二个元素，也就是r

&nbsp;

&nbsp;

2.
[cc lang="c"]char (*ppa)[3][2] = &amp;a[1];[/cc]
ppa代表含有一个二维数组的数组指针，目前指向了第二行
[cc lang="c"]{{'g', 'h'}, {'i', 'j'}, {'k', 'l'}}[/cc]
要想访问到必须再向下一行： ppa++

最后访问r
[cc lang="c"]printf("ppa now is %c\n",ppa[0][2][1]);[/cc]

&nbsp;

其实也可以不用挪动指针而直接访问就可以，比如pa,  pa[5][1]就是r,  paa[1][2][1]也可以访问到r.

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>14</wp:post_id>
		<wp:post_date>2011-06-12 11:01:16</wp:post_date>
		<wp:post_date_gmt>2011-06-12 03:01:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%a4%9a%e7%bb%b4%e6%95%b0%e7%bb%84%e6%8c%87%e9%92%88%e9%97%ae%e9%a2%98</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="c"><![CDATA[c]]></category>
		<category domain="category" nicename="study"><![CDATA[学习]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mysql 新版本编译参数</title>
		<link>http://www.jonnyzheng.com/?p=24</link>
		<pubDate>Sun, 12 Jun 2011 03:57:04 +0000</pubDate>
		<dc:creator>jonny</dc:creator>
		<guid isPermaLink="false">http://www.jonnyzheng.com/?p=24</guid>
		<description></description>
		<content:encoded><![CDATA[新版本的mysql 使用了CMAKE作为编译工具，不论这种方法的优缺点，先上编译参数：

cmake . \
-DCMAKE_BUILD_TYPE:STRING=Release \
-DCMAKE_INSTALL_PREFIX:PATH=/usr/local/mysql \
-DDEFAULT_CHARSET:STRING=utf8 \
-DDEFAULT_COLLATION:STRING=utf8_general_ci \
-DWITH_INNOBASE_STORAGE_ENGINE=1 \
-DMYSQL_UNIX_ADDR=/tmp/mysqld.sock \
-DCOMMUNITY_BUILD:BOOL=ON \
-DENABLED_PROFILING:BOOL=ON \
-DENABLE_DEBUG_SYNC:BOOL=OFF \
-DINSTALL_LAYOUT:STRING=STANDALONE \
-DMYSQL_MAINTAINER_MODE:BOOL=OFF \
-DWITH_EMBEDDED_SERVER:BOOL=ON \
-DWITH_EXTRA_CHARSETS:STRING=all \
-DWITH_SSL:STRING=bundled \
-DWITH_UNIT_TESTS:BOOL=OFF \
-DWITH_ZLIB:STRING=bundled \
-LH



具体可参考 http://forge.mysql.com/wiki/CMake

CMake和 configure的命令行参数比较 http://forge.mysql.com/wiki/CMake#Introduction]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>24</wp:post_id>
		<wp:post_date>2011-06-12 11:57:04</wp:post_date>
		<wp:post_date_gmt>2011-06-12 03:57:04</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mysql-%e6%96%b0%e7%89%88%e6%9c%ac%e7%bc%96%e8%af%91%e5%8f%82%e6%95%b0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<category domain="post_tag" nicename="mysql"><![CDATA[Mysql]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>关于 find_in_set 的性能问题</title>
		<link>http://www.jonnyzheng.com/?p=28</link>
		<pubDate>Sun, 12 Jun 2011 13:13:46 +0000</pubDate>
		<dc:creator>jonny</dc:creator>
		<guid isPermaLink="false">http://www.jonnyzheng.com/?p=28</guid>
		<description></description>
		<content:encoded><![CDATA[同事不少数据表设计的时候使用一个字段来存储多对多关系，比如 表 user中有一个字段叫 category, category存储的是 "1,3,9" 这样的类型的数据，实际上是category的id 用逗号分隔开来的。

要查询一个用户属于id为2分类的用户可以这么写

[cc lang="sql"]select * from `user` where find_in_set('2',`user`.`category`)[/cc]

具体find_in_set 的使用请参照手册

<a href="http://dev.mysql.com/doc/refman/5.1/en/string-functions.html#function_find-in-set">http://dev.mysql.com/doc/refman/5.1/en/string-functions.html#function_find-in-set</a>

虽然这样很好用，但问题是如果数据量大的情况下怎么办，性能会是问题么，手册上有说对find_in_set 做的优化，但在没有索引的情况下他的性能应该是个问题。

于是做了个测试，user 表录入 100万的数据，同时建立 user_category 表，每个user有 3 个分类，那么category表里有300万条记录。

[cc lang="sql"]CREATE TABLE `user_category` (
`id` int(11) NOT NULL AUTO_INCREMENT,
`user_id` int(11) DEFAULT NULL,
`category_id` int(11) DEFAULT NULL,
PRIMARY KEY (`id`),
KEY `category_id` (`category_id`),
KEY `user_id` (`tax_id`)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT [/cc]

现在比较一下在百万级的数据量上使用 join 链接外键查询和find_in_set查询的性能

1. 使用 find_in_set 查询，平均时间在2.2秒左右

[cc lang="sql"]SELECT SQL_NO_CACHE COUNT(*) FROM `user` WHERE FIND_IN_SET(65,category)[/cc]

2. 使用left join ， 使用了右表中的索引，平均时间在0.2秒左右

[cc lang="sql"]SELECT SQL_NO_CACHE COUNT(DISTINCT(`user`.id)) FROM `user`
LEFT JOIN `user_category` ON `user`.`id`= `user_category`.`user_id`
WHERE `user_category`.`category_id`=75[/cc]

所以在大数据量的情况下还是不适合用find_in_set, 不过有些表的数据可能永远就那么点数据，这个时候为了减少表数量，倒是可以用这样的方法做。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>28</wp:post_id>
		<wp:post_date>2011-06-12 21:13:46</wp:post_date>
		<wp:post_date_gmt>2011-06-12 13:13:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>28</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="mysql"><![CDATA[Mysql]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>git server安装</title>
		<link>http://www.jonnyzheng.com/?p=32</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>jonny</dc:creator>
		<guid isPermaLink="false">http://www.jonnyzheng.com/?p=32</guid>
		<description></description>
		<content:encoded><![CDATA[http://hi.baidu.com/meloidea/blog/item/63779f222b39faf0d7cae205.html]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>32</wp:post_id>
		<wp:post_date>2012-01-01 17:35:18</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>windows 为TortoiseGit生成密钥</title>
		<link>http://www.jonnyzheng.com/?p=37</link>
		<pubDate>Wed, 29 Jun 2011 03:09:51 +0000</pubDate>
		<dc:creator>jonny</dc:creator>
		<guid isPermaLink="false">http://www.jonnyzheng.com/?p=37</guid>
		<description></description>
		<content:encoded><![CDATA[使用TortoiseGit 的时候如果进行远程提交的话使用putty密钥会比较方便，记录一下生成密钥的步骤。

&nbsp;

1.  下载 putty, putty-key-Generator

putty 是用来连接远程linux server的客户端，putty-key-Generator是用来生成公钥和密钥的。

&nbsp;

2. 生成公钥密钥

运行  putty-key-Generator，设定生成公钥的长度，一般是1024,2048 .  然后点击Generate按钮，同时鼠标需要在生产区域不停的动，直到密钥生成。

&nbsp;

生成好后，key-comment填写 用户名@主机名 ， 如: git@server1

&nbsp;

3. Linux 端配置

确保 /etc/ssh/ssh_config文件中下面的配置打开

RSAAuthentication yes

&nbsp;

编辑 用户目录下.ssh/authorized_keys, 把第一步生成好的公钥替换掉原来的。

&nbsp;

修改权限：

&nbsp;
<pre>chmod 700 .ssh
chmod 600 .ssh/authorized_keys</pre>
&nbsp;

4. windows端进行连接

使用putty进行连接，connection-&gt;ssh-&gt;auth 里选择第一步保存的私钥， 填写好session信息后登陆。输入login name, 这时使用了私钥就不再需要密码了。

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>37</wp:post_id>
		<wp:post_date>2011-06-29 11:09:51</wp:post_date>
		<wp:post_date_gmt>2011-06-29 03:09:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>windows-%e4%b8%batortoisegit%e7%94%9f%e6%88%90%e5%af%86%e9%92%a5</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="git"><![CDATA[git]]></category>
		<category domain="category" nicename="others"><![CDATA[杂货铺]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Jquery Template 体验</title>
		<link>http://www.jonnyzheng.com/?p=40</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>jonny</dc:creator>
		<guid isPermaLink="false">http://www.jonnyzheng.com/?p=40</guid>
		<description></description>
		<content:encoded><![CDATA[PHP程序员都开发过程中都会使用到页面模板，不管是smarty还是framework里自带的view层，模板的好处是业务逻辑与表现逻辑分离，表现层代码更加清晰。

不过前端还需要Template吗？ 每个苦大仇深的程序员背后都有一群指点江山的大神，凡是有需求就有解决，国外的同胞们估计也遇到了这个的问题， Jquery templates现在已经是Jquery 的官方插件了，目前还是beta版，有需求的同学们仍然可以试试，总比自己拼string要好的多。

Jquery templates要求Jquery的最低版本是 1.4.2

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>40</wp:post_id>
		<wp:post_date>2011-06-30 15:47:52</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="jquery"><![CDATA[jquery]]></category>
		<category domain="category" nicename="others"><![CDATA[杂货铺]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>一些有用的脚本 -- 不断更新</title>
		<link>http://www.jonnyzheng.com/?p=42</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>jonny</dc:creator>
		<guid isPermaLink="false">http://www.jonnyzheng.com/?p=42</guid>
		<description></description>
		<content:encoded><![CDATA[1. 统计web log中的 ip访问量 前x名

cat access_log | awk '{print $1}' | sort | uniq -c | sort -n -r | head -10]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>42</wp:post_id>
		<wp:post_date>2011-08-26 10:49:36</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>关于sphinx查询attribute or 关系的解决办法</title>
		<link>http://www.jonnyzheng.com/?p=45</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>jonny</dc:creator>
		<guid isPermaLink="false">http://www.jonnyzheng.com/?p=45</guid>
		<description></description>
		<content:encoded><![CDATA[http://groups.google.com/group/thinking-sphinx/browse_thread/thread/c481d56f7098437a/f2adc1f5feaa6151

&nbsp;

http://stackoverflow.com/questions/3491742/thinking-sphinx-is-it-possible-to-use-complex-logic-with-attributes

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>45</wp:post_id>
		<wp:post_date>2011-08-27 18:09:27</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ruby-and-rails"><![CDATA[Ruby &amp; Rails]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>vim &amp; Gvim 使用技巧</title>
		<link>http://www.jonnyzheng.com/?p=48</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>jonny</dc:creator>
		<guid isPermaLink="false">http://www.jonnyzheng.com/?p=48</guid>
		<description></description>
		<content:encoded><![CDATA[1.删除行后的 ^M

%s/\r//g

2.大小写转换

Shift + ~

&nbsp;

&nbsp;

&nbsp;

&nbsp;

2. 插件篇

nerdtree 在windows下更换盘符

:NERDTree  d:\]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>48</wp:post_id>
		<wp:post_date>2012-02-28 10:12:29</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Git Rebase 后本地commit记录丢失</title>
		<link>http://www.jonnyzheng.com/?p=52</link>
		<pubDate>Wed, 31 Aug 2011 14:08:25 +0000</pubDate>
		<dc:creator>jonny</dc:creator>
		<guid isPermaLink="false">http://www.jonnyzheng.com/?p=52</guid>
		<description></description>
		<content:encoded><![CDATA[今天下班前要代码要上测试环境，和另外两个同事一起merge代码，等我merge的时候我发现pull不到更新，于是问他俩，他们竟然都签入到了master里去了，邮件里写的很清楚要签入到分支的，两个人一个都没看邮件，当时不hold住就要吐血了。

OK,  反正可以用rebase,  于是用TortoiseGit的rebase功能把他们在master上的代码merge到当前分支上来，一切搞定后提交测试，结果他俩的代码都正确了，我之前写的功能没有了，再看看代码今天写的东西都没有了，shit, 看来真是hold不住了。

查看log记录，没有push到远程的commit也都不见，难道真的要重写一遍么，还好万能的 Google 救了我。

即使rebase命令已经干掉了上一次push到现在的所有提交记录但是在本地文件里还是有相关信息的，找到项目目录下的git文件 .git\logs\refs\heads\branchname, 打开来看看

[cc lang="text"]

0000000000000000000000000000000000000000 f7f3b11f66b709dcd93e1c15825270dce90adc5e jonny &lt;jonny.zheng@lexisnexis.com&gt; 1314676889 +0800	branch: Created from HEAD

f7f3b11f66b709dcd93e1c15825270dce90adc5e 74173c185de3ce5ee846bc7e0326481276372071 jonny &lt;jonny.zheng@lexisnexis.com&gt; 1314682422 +0800	commit (amend): init

74173c185de3ce5ee846bc7e0326481276372071 93ba66f74b9e11ed8acae3e6ddd1159be1ff9ef4 jonny &lt;jonny.zheng@lexisnexis.com&gt; 1314682760 +0800	commit (merge): Merge branch 'b3.3' of 10.123.4.212:/opt/git/jolnet into b3.3

93ba66f74b9e11ed8acae3e6ddd1159be1ff9ef4 9273c7dbd497d070ebd8704f284444f658666954 jonny &lt;jonny.zheng@lexisnexis.com&gt; 1314772033 +0800	commit: 1

9273c7dbd497d070ebd8704f284444f658666954 9530c1ca1730ab1c249d3c301817bd037b3f6773 jonny &lt;jonny.zheng@lexisnexis.com&gt; 1314786503 +0800	commit: daily check in

9530c1ca1730ab1c249d3c301817bd037b3f6773 c91bb413528815321b10929d9cd26480de64f3bf jonny &lt;jonny.zheng@lexisnexis.com&gt; 1314787003 +0800	commit (amend): daily check in

c91bb413528815321b10929d9cd26480de64f3bf 3006dced1c8d39108483927bd5cc1e9ee4d1ec05 jonny &lt;jonny.zheng@lexisnexis.com&gt; 1314788056 +0800	3006dced1c8d39108483927bd5cc1e9ee4d1ec05: updating HEAD

3006dced1c8d39108483927bd5cc1e9ee4d1ec05 813acf5e60bc0d2e64c9682fe7498dc79606e1e1 jonny &lt;jonny.zheng@lexisnexis.com&gt; 1314788446 +0800	813acf5e60bc0d2e64c9682fe7498dc79606e1e1: updating HEAD

813acf5e60bc0d2e64c9682fe7498dc79606e1e1 ada2680266b192a0ebf8d4a43ca8ca4812aadc78 jonny &lt;jonny.zheng@lexisnexis.com&gt; 1314788695 +0800	ada2680266b192a0ebf8d4a43ca8ca4812aadc78: updating HEAD

ada2680266b192a0ebf8d4a43ca8ca4812aadc78 a259bcff43cc726be011efbbeb5975ffafb87ee5 jonny &lt;jonny.zheng@lexisnexis.com&gt; 1314788871 +0800	commit: rebase

[/cc]

最后一行是rebase的操作，我只要新建个分支在里面找回前一行commit的代码就可以了。

[cc lang="bash"]

git checkout -b my_recovery 0800	ada2680266b192a0ebf8d4a43ca8ca4812aadc78

[/cc]

&nbsp;

方法2（这个更简单）

[cc]
git reflog
# Suppose the old commit was HEAD@{5} in the ref log
git reset --hard HEAD@{5}
[/cc]

&nbsp;

&nbsp;

终于找回了丢失的代码，可以不用重写一遍了，而且学到了很有用的解决方法，看来犯错也不都是坏事。

最后补一句，还是命令行比较好用，图形化的复杂操作不会用啊。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>52</wp:post_id>
		<wp:post_date>2011-08-31 22:08:25</wp:post_date>
		<wp:post_date_gmt>2011-08-31 14:08:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>git-rebase-%e5%90%8e%e6%9c%ac%e5%9c%b0commit%e8%ae%b0%e5%bd%95%e4%b8%a2%e5%a4%b1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="git"><![CDATA[git]]></category>
		<category domain="category" nicename="others"><![CDATA[杂货铺]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Paperclip在development 模式下打印不出convert 命令</title>
		<link>http://www.jonnyzheng.com/?p=62</link>
		<pubDate>Fri, 02 Sep 2011 06:56:41 +0000</pubDate>
		<dc:creator>jonny</dc:creator>
		<guid isPermaLink="false">http://www.jonnyzheng.com/?p=62</guid>
		<description></description>
		<content:encoded><![CDATA[今天升级了一下bundle，结果在调试时发现原先可以打印paperclip执行的imagemagick命令，现在却不可以了，网上看了一下，原因是paperclip 调用了 Cocaine插件， 而之前执行命令的log代码已经删掉了，全靠Cocaine输出。

简单的改法:

修改 config/environments/development.rb文件，最后一行加一句:

[cc lang="ruby"]Cocaine::CommandLine.logger = Logger.new(STDOUT)[/cc] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>62</wp:post_id>
		<wp:post_date>2011-09-02 14:56:41</wp:post_date>
		<wp:post_date_gmt>2011-09-02 06:56:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>paperclip%e5%9c%a8development-%e6%a8%a1%e5%bc%8f%e4%b8%8b%e6%89%93%e5%8d%b0%e4%b8%8d%e5%87%baconvert-%e5%91%bd%e4%bb%a4</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="paperclip"><![CDATA[paperclip]]></category>
		<category domain="category" nicename="ruby-and-rails"><![CDATA[Ruby &amp; Rails]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>linode 和 Amazon EC2 国内访问速度的比较</title>
		<link>http://www.jonnyzheng.com/?p=65</link>
		<pubDate>Sat, 10 Sep 2011 15:51:51 +0000</pubDate>
		<dc:creator>jonny</dc:creator>
		<guid isPermaLink="false">http://www.jonnyzheng.com/?p=65</guid>
		<description></description>
		<content:encoded><![CDATA[这两天在看云主机和vps，比较了一下目前的网速:

&nbsp;

AWS 新加坡机房 300ms左右

AWS 日本机房 120ms左右

linode 美国机房 200-300ms左右，不稳定，晚上会慢一点，估计是美国白天的关系。

linode 日本机房 70ms左右，前两天刚从美国迁移过来，速度很不错。

公司香港机房  50 ms 仅做参考

盛大云 (云中书城)  10- 20ms   云中书城是他唯一给出的案例，没法测试别的是否也这么快。

刚申请成功盛大云， ping 新浪的结果是135 ms左右, 而且访问国外速度比较慢，linux下包有时只有8k, 继续试用中。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>65</wp:post_id>
		<wp:post_date>2011-09-10 23:51:51</wp:post_date>
		<wp:post_date_gmt>2011-09-10 15:51:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>linode-%e5%92%8c-amazon-ec2-%e5%9b%bd%e5%86%85%e8%ae%bf%e9%97%ae%e9%80%9f%e5%ba%a6%e7%9a%84%e6%af%94%e8%be%83</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="%e4%ba%91"><![CDATA[云]]></category>
		<category domain="category" nicename="internet"><![CDATA[互联网]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>长期招募创业伙伴 上海地区</title>
		<link>http://www.jonnyzheng.com/?p=67</link>
		<pubDate>Sat, 10 Sep 2011 15:39:24 +0000</pubDate>
		<dc:creator>jonny</dc:creator>
		<guid isPermaLink="false">http://www.jonnyzheng.com/?p=67</guid>
		<description></description>
		<content:encoded><![CDATA[本人正在进行一个创业计划，如果你是：交互及设计师，前端攻城师，Rails 攻城师 ,最好上海地区，如果能力很强可以外地， 而且希望趁年轻一起做一些疯狂的事情，可以联系我:mars131[at]gmail.com  。

前期以业余时间为主，没有报酬，如果能融资到钱或者项目上线有收入了可以全职，待遇肯定比平均标准高，而且创业伙伴有股份。

目前急需设计师做交互构思和设计，欢迎推荐。

站点: <a title="米十网" href="http://www.riceten.com">www.riceten.com</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>67</wp:post_id>
		<wp:post_date>2011-09-10 23:39:24</wp:post_date>
		<wp:post_date_gmt>2011-09-10 15:39:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e9%95%bf%e6%9c%9f%e6%8b%9b%e5%8b%9f%e5%88%9b%e4%b8%9a%e4%bc%99%e4%bc%b4-%e4%b8%8a%e6%b5%b7%e5%9c%b0%e5%8c%ba</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="internet"><![CDATA[互联网]]></category>
		<category domain="post_tag" nicename="%e5%88%9b%e4%b8%9a"><![CDATA[创业]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>选北大不选人大的原因</title>
		<link>http://www.jonnyzheng.com/?p=78</link>
		<pubDate>Thu, 15 Sep 2011 05:02:14 +0000</pubDate>
		<dc:creator>jonny</dc:creator>
		<guid isPermaLink="false">http://www.jonnyzheng.com/?p=78</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;

<a href="http://www.jonnyzheng.com/wp-content/uploads/2011/09/1088_76828716_repaste.jpeg"><img class="alignnone size-full wp-image-79" title="1088_76828716_repaste" src="http://www.jonnyzheng.com/wp-content/uploads/2011/09/1088_76828716_repaste.jpeg" alt="" width="490" height="196" /></a>

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>78</wp:post_id>
		<wp:post_date>2011-09-15 13:02:14</wp:post_date>
		<wp:post_date_gmt>2011-09-15 05:02:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e9%80%89%e5%8c%97%e5%a4%a7%e4%b8%8d%e9%80%89%e4%ba%ba%e5%a4%a7%e7%9a%84%e5%8e%9f%e5%9b%a0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="others"><![CDATA[杂货铺]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>git 常用命令</title>
		<link>http://www.jonnyzheng.com/?p=88</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>jonny</dc:creator>
		<guid isPermaLink="false">http://www.jonnyzheng.com/?p=88</guid>
		<description></description>
		<content:encoded><![CDATA[<div>
<ul>
	<li>删除git上的文件并且保留本地文件 git rm --cached &lt;file&gt;</li>
	<li>添加tags到远程库 git push origin --tags</li>
	<li>获取远程分支 git fetch</li>
</ul>
</div>


<strong>git stash命令</strong>

当写代码的时候需要切换到别的分支又不想commit还没有完成的代码的时候我们可以用git stash命令，stash命令相当于一个暂存区域，我们可以把当前的改动通通放到这个区域里面去。
<code>
$ git stash save 
Saved "WIP on master: e71813e..."
</code>


stash区域可以存入1个以上的工作状态，用git stash list命令就能看到所有在stash区域里的工作状态
<code lang="bash">
$ git stash list
stash@{0}: On jol3.5: test2
stash@{1}: On jol3.5: test1
</code>

从上面的list里面我们可以看到一共有两个item, stash@{0}和stash@{1},数字用来标记当前的位置，stash使用的是栈模式，先进后出，所以当你已经完成了当前工作，想把之前存入的改动找回来的时候可以用我们可以用pop弹出一个item或者用apply 接受一个改动。需要注意的是git stash pop 永远弹出的是stash@{0}, 而apply可以使用任何项，还有就是pop弹出的项不再出现在list里面， 具体用法如下:

<code lang="bash">
$ git stash apply stash@{1}
# On branch jol3.5
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#
#       modified:   jol/log4net.config
#


$ git stash list
stash@{0}: On jol3.5: test2
stash@{1}: On jol3.5: test1


$ git stash pop

$ git stash list
stash@{0}: On jol3.5: test1
</code>
从上面的命令可以看出pop之后stash里的item数量从2个变成了1个。

当stash里的数据不再需要的时候我们用git stash clear命令清空整个空间。
<br/><br/>


<strong>用pull好还是用rebase好</strong>

在远程分支已经有他人提交了最新的分支时我们往往需要pull得到最新的代码, git pull = git fetch + git merge。一方面合并会产生除了合并双方（或多方）所有提交外的一个新提交，增加了代码审核的负担，另一方面本地多个提交混杂一起与远程分支合并会更困难

http://www.worldhello.net/gotgithub/04-work-with-others/020-shared-repo.html
http://www.cnblogs.com/iammatthew/archive/2011/12/06/2277383.html]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>88</wp:post_id>
		<wp:post_date>2012-04-26 17:51:58</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>程序开发心理学读后小结</title>
		<link>http://www.jonnyzheng.com/?p=95</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>jonny</dc:creator>
		<guid isPermaLink="false">http://www.jonnyzheng.com/?p=95</guid>
		<description></description>
		<content:encoded><![CDATA[之前我从来不知道程序开发还有心理学这回事，后来从摆摆书架上换到了这本书，每天花半小时在地铁上把书看完了，这本40年前写的书对于今天的程序开发依然非常适用，神作啊神作，个人认为其实际指导作用更甚于人月神话。

&nbsp;

1. 阅读程序，理解程序的局限性。做为一名程序员我们经常会被离奇古怪的bug搞的焦头烂额，然后大骂写这个程序的人及其傻逼，当然也不排除有些时候发现代码注释里的署名竟然是自己。然而除去一些愚蠢的错误外，还有很大一部分bug是因为我们的各种综合因素导致现在的代码就是这样的。所以我们要面对的事实就是 只有在你实际动手编程或阅读后才能搞清楚代码为神马是这样的。
<ul>
	<li>程序员的问题</li>
</ul>
由于对于计算机程序语言掌握程度不同，程序员可能产生很多冗余的代码(例如不知道有些现成的函数可以调用，有些很好用的语法可以减少代码，而写这个程序的人并不知道有这种写法)。
<ul>
	<li>历史遗留问题</li>
</ul>
很多代码的存在是有他的历史原因的，比如当时提出的特定的需求，当时软件版本的原因。我们就曾经碰到过一个问题，因为把mysql的一个表存储引擎改成innodb后很多php页面报错，后来发现是因为很多插入语句用了这样的语法 "<span style="font-family: Consolas, Monaco, 'Courier New', Courier, monospace; font-size: 12px; line-height: 18px; white-space: pre;">INSERT DELAYED INTO</span>"， 而 insert delayed into 只有myisam引擎支持。 写这个程序的人并没有错，原来的表是myisam的，这样写反而可以提高数据库效率，可以说在没改表引擎之前这段代码是很正确的。

小结：程序被编写成什么样子取决于众多的因素，然而因为习惯于从外部去考察，而不是阅读程序本身，我们总是无法认识到这些因素的多样性。一旦我们真的阅读了程序，就会发现无论是否必要，其中这些代码之所以如此编写都是有他的各种原因的。所以作者认为程序开发是一项社会行为，因该关注以人为主体的这些活动。

反省： 我们是否有常常阅读代码的习惯，我们上一次阅读别人或是自己以前写过的代码是什么时候了，为什么不现在尝试一下，看看会发现写什么。

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>95</wp:post_id>
		<wp:post_date>2012-02-28 10:14:15</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Rails Testing</title>
		<link>http://www.jonnyzheng.com/?p=101</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>jonny</dc:creator>
		<guid isPermaLink="false">http://www.jonnyzheng.com/?p=101</guid>
		<description></description>
		<content:encoded><![CDATA[Rails 框架从一开始就很好的支持各种测试(单元测试，集成测试),  到现在又有很多优秀的plugin提供各方面的补充，在我们的项目里用到了RSpec + FactoryGirl(是不是很性感) + autotest, 说一说使用经验供大家参考:

开始之前说点跑题的话，Rails 当时是深受敏捷开发的影响，所以测试功能是一点都不含糊的，但是就TDD来说我还是非常不喜欢的。首先TDD要求先写测试用例，在初期开发中会有很多变数，很多你写的测试用例可能在以后需要修改，而产品没有成型之前做这样的工作有点得不偿失，其次是在没有实际东西之前的凭空想象有点折磨人，我的脑细胞还有别的用处，不想浪费在这方面。再就是个人认为测试代码是一个持续长久的过程，我们没必要通过测试来驱动我们的代码工作，但是我们需要通过持续的提高测试覆盖率来保证我们的代码质量，提高我们的测试效率，可以让我们有更多的时间做更重要的事情，而不是陷入无数bug的泥沼里。
<h3>Rspec</h3>
&nbsp;

&nbsp;

&nbsp;

&nbsp;
<h3>FactoryGirl</h3>
有了这个工厂，可以很方便的构造不同的模拟数据来运行测试代码。还是上面的例子，如果要测试<code>absence_at</code>方法，涉及到多个model：
<ul>
	<li>HistoryRecord：User的上课记录</li>
	<li>Calendar：User的课程表</li>
	<li>Logging：User的日志信息</li>
</ul>
如果不用factory-girl构造测试数据，我们将不得不在fixture构造这些测试数据。在fixture构造的数据无法指定是那个测试用例使用，但是如果用Factory的话，可以为这个方法专门指定一组测试数据。
<pre>Factory.define :user_absence_example,:class =&gt; User do |user|
  user.login "test"
  class &lt;&lt; user
    def default_history_records
      [Factory.build(:history_record,:started_at=&gt;Time.now),
       Factory.build(:history_record,:started_at=&gt;Time.now)]
    end
    def default_calendars
      [Factory.build(:calendar),
       Factory.build(:calendar)]
     end
     def default_loggings
      [Factory.build(:logging,:started_at=&gt;1.days.ago),
       Factory.build(:logging,:started_at=&gt;1.days.ago)]
     end
   end
   user.history_records {default_history_records}
   user.calendars {default_calendars}
   user.loggings {default_loggings}
end</pre>
这个测试数据的构造工厂，可以放在factories.rb文件中，方便其他测试用例使用，也可以直接放到测试文件的before中，仅供本测试文件使用。通过factory的构造，不仅可以为多个测试用例共享同一组测试数据，而且测试代码也简洁明了。
<pre>before :each do
  @user = Factory.create(:user_absence_example)
end</pre>
<pre>SPhinx 测试</pre>
<pre>rake RAILS_ENV=test ts:rebuild</pre>
<pre></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>101</wp:post_id>
		<wp:post_date>2012-01-06 13:57:25</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>metaprogramming </title>
		<link>http://www.jonnyzheng.com/?p=138</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>jonny</dc:creator>
		<guid isPermaLink="false">http://www.jonnyzheng.com/?p=138</guid>
		<description></description>
		<content:encoded><![CDATA[<script src="https://gist.github.com/1928765.js"> </script>



Proc和lambda的区别

Proc 的 return 是和lambda的 return 是不一样滴，lambda <strong>return</strong> 是退出自己作用域范围。

proc 的 return 是退出proc定义时所在的作用域，这个需要注意，并不是退出执行proc的method或类似作用域，而是proc定义时所在的作用域，所以看下面的例子：

proc在mytest方法里被执行，但是return实际上是作用在myclient方法上面，所以下面的123永远不会被打印出来
<script src="https://gist.github.com/1998921.js?file=define_proc_in_method.rb"></script>

这里 proc的return 是发生在最外层的，而在最外层做return操作就报错了
<script src="https://gist.github.com/1998921.js?file=define_proc_outside.rb"></script>


lambda的返回只是返回自己的作用域，比较好理解,下面的代码会继续执行mytest后面的方法，并得到结果
<script src="https://gist.github.com/1998921.js?file=lambda_sample.rb"></script>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>138</wp:post_id>
		<wp:post_date>2012-03-08 17:16:07</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>rubychina 上的一段小代码</title>
		<link>http://www.jonnyzheng.com/?p=220</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>jonny</dc:creator>
		<guid isPermaLink="false">http://www.jonnyzheng.com/?p=220</guid>
		<description></description>
		<content:encoded><![CDATA[如下的代码会输出什么内容

<code lang="ruby">
module Foo
  def self.included(base)
    base.class_eval do
      extend ClassMethods
      include InstanceMethods
    end
  end

  module ClassMethods
    def hello
      new.world
    end
  end

  module InstanceMethods
    def world
      puts "Hello, world"
    end
  end
 end

class Bar
  include Foo
  hello
end

</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>220</wp:post_id>
		<wp:post_date>2012-04-10 16:22:22</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Go 语言初探</title>
		<link>http://www.jonnyzheng.com/?p=230</link>
		<pubDate>Thu, 01 Jan 1970 00:00:00 +0000</pubDate>
		<dc:creator>jonny</dc:creator>
		<guid isPermaLink="false">http://www.jonnyzheng.com/?p=230</guid>
		<description></description>
		<content:encoded><![CDATA[不想源码编译的同学可以直接下编译好的程序,支持还是比较全面的，MacOS,Linux,Window版本都有:
<a href="http://code.google.com/p/go/downloads/list">http://code.google.com/p/go/downloads/list</a>


下载安装包copy到/usr/local/go目录，然后编辑~/.bash_profile加上运行环境
<code lang="bash">
export PATH=$PATH:/usr/local/go/bin
</code>




<strong>Map</strong>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>230</wp:post_id>
		<wp:post_date>2012-04-12 17:46:49</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>百度更懂中文</title>
		<link>http://www.jonnyzheng.com/?p=82</link>
		<pubDate>Thu, 15 Sep 2011 12:24:14 +0000</pubDate>
		<dc:creator>jonny</dc:creator>
		<guid isPermaLink="false">http://www.jonnyzheng.com/?p=82</guid>
		<description></description>
		<content:encoded><![CDATA[<img class="alignnone size-full wp-image-85" title="baidu" src="http://www.jonnyzheng.com/wp-content/uploads/2011/09/baidu1.png" alt="" width="834" height="383" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>82</wp:post_id>
		<wp:post_date>2011-09-15 20:24:14</wp:post_date>
		<wp:post_date_gmt>2011-09-15 12:24:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e7%99%be%e5%ba%a6%e6%9b%b4%e6%87%82%e4%b8%ad%e6%96%87</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="internet"><![CDATA[互联网]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>vim window下显示换行符的问题</title>
		<link>http://www.jonnyzheng.com/?p=98</link>
		<pubDate>Fri, 18 Nov 2011 08:19:49 +0000</pubDate>
		<dc:creator>jonny</dc:creator>
		<guid isPermaLink="false">http://www.jonnyzheng.com/?p=98</guid>
		<description></description>
		<content:encoded><![CDATA[&nbsp;

关于回车与换行

很久以前，老式的电传打字机使用两个字符来另起新行。一个字符把滑动架移回首位 (称为回车，&lt;CR&gt;，ASCII码为0D)，另一个字符把纸上移一行 (称为换行, &lt;LF&gt;，ASCII码为0A)。当计算机问世以后，存储器曾经非常昂贵。有些人就认定没必要用两个字符来表示行尾。UNIX 开发者决定他们可以用 一个字符来表示行尾，Linux沿袭Unix，也是&lt;LF&gt;。Apple 开发者规定了用&lt;CR&gt;。开发 MS-DOS以及Windows 的那些家伙则决定沿用老式的&lt;CR&gt;&lt;LF&gt;。

因为MS-DOS及Windows是回车＋换行来表示换行，因此在Linux下用Vim查看在Windows下用VC写的代码，行尾后的“^M”符号，表示的是符。

在Vim中解决这个问题，很简单，在Vim中利用替换功能就可以将“^M”都干掉，键入如下替换命令行：
<div>:%s/^M//g</div>
注意：上述命令行中的“^M”符，不是“^”再加上“M”，而是由“Ctrl+v”、“Ctrl+M”键生成的

&nbsp;

vim 自动识别换行符

set fileformats=unix,dox,mac

设置保存格式

set fileformat=unix

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>98</wp:post_id>
		<wp:post_date>2011-11-18 16:19:49</wp:post_date>
		<wp:post_date_gmt>2011-11-18 08:19:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>vim-window%e4%b8%8b%e6%98%be%e7%a4%ba%e6%8d%a2%e8%a1%8c%e7%ac%a6%e7%9a%84%e9%97%ae%e9%a2%98</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="uncategorized"><![CDATA[Uncategorized]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>根据IP获得城市名称 Ruby 版</title>
		<link>http://www.jonnyzheng.com/?p=106</link>
		<pubDate>Fri, 06 Jan 2012 06:03:55 +0000</pubDate>
		<dc:creator>jonny</dc:creator>
		<guid isPermaLink="false">http://www.jonnyzheng.com/?p=106</guid>
		<description></description>
		<content:encoded><![CDATA[很多本地化生活网站的一个基本功能就是根据用户的IP地址判断所在的城市，基本的逻辑就是有一个ip库，根据ip库里的记录找到用户ip地址所在的范围。

IP库没有太多选择，我在网上找到的一个<a href="http://www.maxmind.com/app/ip-location">http://www.maxmind.com/app/ip-location</a>， 这个网站本身提供收费的IP库和免费的IP库，收费的库在准确率上要稍微高一些，拿城市的库做一个例子，左边是免费版，右边是收费版：
<table>
<tbody>
<tr>
<th></th>
<td>GeoLite City</td>
<td><span style="color: #000000;"><a href="http://www.maxmind.com/app/city"><span style="color: #000000;">GeoIP City</span></a></span></td>
</tr>
<tr>
<td>Cost</td>
<td>Free</td>
<td>$370 initial, $90 per month updates</td>
</tr>
<tr>
<td>Coverage</td>
<td>Worldwide</td>
<td>Worldwide</td>
</tr>
<tr>
<td>Accuracy</td>
<td>Over 99.5% on a country level and 79% on a city level for the US within a 25 mile radius. <a href="http://www.maxmind.com/app/geolite_city_accuracy">More details</a></td>
<td>Over 99.8% on a country level and 83% on a city level for the US within a 25 mile radius. <a href="http://www.maxmind.com/app/city_accuracy">More details</a></td>
</tr>
<tr>
<td>Redistribution</td>
<td>Free, subject to GPL/LGPL for APIs and <a href="http://geolite.maxmind.com/download/geoip/database/LICENSE.txt">database license</a>. <a href="http://www.maxmind.com/app/builder">Commercial redistribution licenses</a> are available</td>
<td>Please contact us.</td>
</tr>
<tr>
<td>Updates</td>
<td>Updated monthly, at the beginning of each month</td>
<td>Updated monthly. For binary format, weekly updates, automated updates available by using geoipupdate program included with<a href="http://www.maxmind.com/app/c">C API</a></td>
</tr>
</tbody>
</table>

<p></p>
ruby 的使用很简单，有一个gem库: <a href="http://geoip.rubyforge.org/">http://geoip.rubyforge.org/</a>
[ccw_ruby]
require ‘geoip’
c = GeoIP.new(‘GeoIP.dat’).country(‘www.nokia.com’)
=> [“www.nokia.com”, “147.243.3.83”, 69, “FI”, “FIN”, “Finland”, “EU”]
c.country_code3
=> “FIN”
c.to_hash
=> {:country_code3=>"FIN", :country_name=>"Finland", :continent_code=>"EU",
:request=>"www.nokia.com", :country_code=>69, :country_code2=>"FI", :ip=>"147.243.3.83"}


c = GeoIP.new(‘GeoLiteCity.dat’).city(‘github.com’)
=> [“github.com”, “207.97.227.239”, “US”, “USA”, “United States”, “NA”, “CA”,
“San Francisco”, “94110”, 37.7484, -122.4156, 807, 415, “America/Los_Angeles”]
>> c.longitude
=> -122.4156
>> c.timezone
=> “America/Los_Angeles”


c = GeoIP.new(‘GeoIPASNum.dat’).asn(“www.fsb.ru”)
=> [“AS8342”, “RTComm.RU Autonomous System”]
[/ccw_ruby]

<p>我下了一个citylite的免费库，只试了我自己的地址，判断是准确的，还没有找其他的地方进行测试,79%的准确率不高也不低，用作预判断还是可以接受的。</p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>106</wp:post_id>
		<wp:post_date>2012-01-06 14:03:55</wp:post_date>
		<wp:post_date_gmt>2012-01-06 06:03:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%a0%b9%e6%8d%aeip%e8%8e%b7%e5%be%97%e5%9f%8e%e5%b8%82%e5%90%8d%e7%a7%b0-ruby-%e7%89%88</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="ruby-and-rails"><![CDATA[Ruby &amp; Rails]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>关于Jquery offset().top 在IE和Firefox下行为不一致的问题</title>
		<link>http://www.jonnyzheng.com/?p=152</link>
		<pubDate>Fri, 02 Mar 2012 07:20:00 +0000</pubDate>
		<dc:creator>jonny</dc:creator>
		<guid isPermaLink="false">http://www.jonnyzheng.com/?p=152</guid>
		<description></description>
		<content:encoded><![CDATA[项目中用到了JSTree,原先一个页面里包含了很多的tab标签，而且每个tab标签内功能都很多，用到了大量的js代码，后来我们决定把tab里的内容分成不同的page，然后用iframe调用。

于是奇怪的问题出现了，在IE下面拖动滚动条后jstree的node怎么也点不了了，像事件丢失了一样。调试了一会貌似不是我代码的原因，于是到JSTree的源码里看看，结果看到下面这一句，他计算的事件点击在页面的position要在node的li高度范围内，这个不知道为啥要这样做，很是奇怪，但是这就是为什么在iframe里会出怪问题的原因。
<code lang="javascript">
if(trgt.is("ins") && event.pageY - trgt.offset().top < this.data.core.li_height)
{ 
    this.toggle_node(trgt); 
}
</code>
<br/>
<br/>


在ie下面当右边滚动条滚动后$(element).offset().top计算出来的值就不对了，必须要加document.documentElement.scrollTop 的值才能得到正确的结果，迫不得已，修补bug如下

<code lang="javascript">
var posY = 0;
if(window.parent!= window && $.browser.msie)
    posY= (trgt.offset().top+document.documentElement.scrollTop); 
else
    posY= trgt.offset().top;
if(trgt.is("ins") && event.pageY - posY < this.data.core.li_height) { this.toggle_node(trgt); }
</code>

Jquery里也有人提到这个问题，不知道新版有没有修复此bug， 附上地址供参考 <a href="http://api.jquery.com/offset/"></a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>152</wp:post_id>
		<wp:post_date>2012-03-02 15:20:00</wp:post_date>
		<wp:post_date_gmt>2012-03-02 07:20:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%85%b3%e4%ba%8ejquery-offset-top-%e5%9c%a8ie%e5%92%8cfirefox%e4%b8%8b%e8%a1%8c%e4%b8%ba%e4%b8%8d%e4%b8%80%e8%87%b4%e7%9a%84%e9%97%ae%e9%a2%98</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="js"><![CDATA[js]]></category>
		<category domain="category" nicename="others"><![CDATA[杂货铺]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Sublime 下配置vim模式</title>
		<link>http://www.jonnyzheng.com/?p=172</link>
		<pubDate>Mon, 12 Mar 2012 06:30:38 +0000</pubDate>
		<dc:creator>jonny</dc:creator>
		<guid isPermaLink="false">http://www.jonnyzheng.com/?p=172</guid>
		<description></description>
		<content:encoded><![CDATA[最近用上了sublime text2， 和textmate比界面要漂亮一些，而且几个平台下都有对应版本，比较统一。

sublime支持文本编辑使用 vim 模式，vim 快捷键编辑文本还是挺快的，两个编辑器融合一下也挺好，选择Preferences->Settings- Default, 在文本的最下面有一行 <code>"ignored_packages": ["vintage"]</code> ，这里sublime 默认去掉了vim的支持，我们只需要把"vintage"删掉就好了。

再在编辑框里试试已经ok了，但是在vim里我都把ESC键映射到了'ii'上了： imap 'ii' <Esc> ，这里并不支持imap。 不过我们可以在vintage 的package包里自己定义，我的机器是windows,默认packages都装在了 C:\Documents and Settings\zhengj1\Application Data\Sublime Text 2\Packages 目录下，找到Vintage\Default.sublime-keymap文件，用文本编辑器打开，加上下面的代码：

<code>
        { "keys": ["i","i"], "command": "exit_insert_mode",
		"context":
		[
			{ "key": "setting.command_mode", "operand": false },
			{ "key": "setting.is_widget", "operand": false }
		]
	},

	{ "keys": ["i","i"], "command": "hide_auto_complete", "context":
		[
			{ "key": "auto_complete_visible", "operator": "equal", "operand": true }
		]
        },

	{ "keys": ["i","i"], "command": "vi_cancel_current_action", "context":
		[
			{ "key": "setting.command_mode" },
			{ "key": "selection_empty", "operator": "equal", "operand": true, "match_all": false },
			{ "key": "vi_has_input_state" }
		]
	},
</code>

这个keymap文件里可以定义自己习惯的快捷键方式，有兴趣的不妨研究研究。

vintage这个插件并不支持command， 想要支持还需要下一个<a href="https://github.com/SublimeText/VintageEx" title="VintageEx">VintageEx </a>包，一些简单的命令就可以用了。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>172</wp:post_id>
		<wp:post_date>2012-03-12 14:30:38</wp:post_date>
		<wp:post_date_gmt>2012-03-12 06:30:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sublime-%e4%b8%8b%e9%85%8d%e7%bd%aevim%e6%a8%a1%e5%bc%8f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="others"><![CDATA[杂货铺]]></category>
		<category domain="post_tag" nicename="%e7%bc%96%e8%be%91%e5%99%a8"><![CDATA[编辑器]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>37signals倡导及实践的8个理念</title>
		<link>http://www.jonnyzheng.com/?p=181</link>
		<pubDate>Tue, 20 Mar 2012 03:57:01 +0000</pubDate>
		<dc:creator>jonny</dc:creator>
		<guid isPermaLink="false">http://www.jonnyzheng.com/?p=181</guid>
		<description></description>
		<content:encoded><![CDATA[转贴：以此为标准铭记于心

在软件设计界，37signals是非常受欢迎的一个小团队，对于Geek更是如此。不仅因为其自身产品的简洁、精益，更在于其对自身理念的实践。同时他们出版的书籍深受欢迎，特别是《Getting Real》及《Rework》。下面让我们看看他们所倡导的8个理念，对于产品设计、企业管理甚至个人素养都具有一定参考价值。
<br/>

<strong>可用性才是永恒</strong>
其它一切都可能消失，唯可用性永远不会。我们只建立你需要的软件，其它一切都是多余。
<br/>

<strong>优质的服务就是一切</strong>
我们以快速和友好的客户服务著称，每天都努力确保这份荣誉。
<br/>

<strong>简洁清晰是王道</strong>
在37signals，口号、术语以及任何吹嘘式语言将无立足之地。我们的沟通讲求清晰与真诚。
<br/>

<strong>客户就是投资者</strong>
我们的客户通过购买产品支持我们的日常运作，我们向他们汇报工作，而不是投资人、市场或者董事会。
<br/>

<strong>基础的元素最美</strong>
我们从不会忽略真正重要的东西：基础元素、优质服务、易用性、可靠的价格以及对我们客户时间、金钱与信任的尊重。
<br/>

<strong>定价公开</strong>
我们相信我们提供的价格是公道的，所有的价格面向所有人公开。
<br/>

<strong>软件需要简单容易</strong>
我们的产品都具有直觉性，打开软件几分钟就可上手，而非花上几天甚至几周时间。我们不会给你培训而收费，因为你根本不需要。
<br/>


<strong>长期合作是可憎的</strong>
没有人愿意将自己绑在一件不喜欢的事情上。我们的客户可以随时取消合作。
<br/>

转自36氪 <a href="http://www.36kr.com/p/92141.html" title="37signals倡导及实践的8个理念">37signals倡导及实践的8个理念</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>181</wp:post_id>
		<wp:post_date>2012-03-20 11:57:01</wp:post_date>
		<wp:post_date_gmt>2012-03-20 03:57:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>37signals%e5%80%a1%e5%af%bc%e5%8f%8a%e5%ae%9e%e8%b7%b5%e7%9a%848%e4%b8%aa%e7%90%86%e5%bf%b5</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="internet"><![CDATA[互联网]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Java泛型简明教程</title>
		<link>http://www.jonnyzheng.com/?p=190</link>
		<pubDate>Wed, 28 Mar 2012 07:16:18 +0000</pubDate>
		<dc:creator>jonny</dc:creator>
		<guid isPermaLink="false">http://www.jonnyzheng.com/?p=190</guid>
		<description></description>
		<content:encoded><![CDATA[转自<a href="http://www.aqee.net/java-generics-quick-tutorial/">外刊it评论</a>

泛型是Java SE 5.0中引入的一项特征，自从这项语言特征出现多年来，我相信，几乎所有的Java程序员不仅听说过，而且使用过它。关于Java泛型的教程，免费的，不免费的，有很多。我遇到的最好的教材有：

<a href="http://download.oracle.com/javase/tutorial/">The Java Tutorial</a>
<a href="http://bit.ly/jAzfIt">Java Generics and Collections</a>, by Maurice Naftalin and Philip Wadler
<a href="http://goo.gl/ixwNn">Effective Java中文版(第2版)</a>, by Joshua Bloch.

尽管有这么多丰富的资料，有时我感觉，有很多的程序员仍然不太明白Java泛型的功用和意义。这就是为什么我想使用一种最简单的形式来总结一下程序员需要知道的关于Java泛型的最基本的知识。
<br/>
<strong>Java泛型由来的动机</strong>

理解Java泛型最简单的方法是把它看成一种便捷语法，能节省你某些Java类型转换(casting)上的操作：
<code lang="java">
List box = ...;
Apple apple = box.get(0);
</code>

上面的代码自身已表达的很清楚：box是一个装有Apple对象的List。get方法返回一个Apple对象实例，这个过程不需要进行类型转换。没有泛型，上面的代码需要写成这样：

<code lang="java">
List box = ...;
Apple apple = (Apple) box.get(0);
</code>
很明显，泛型的主要好处就是让编译器保留参数的类型信息，执行类型检查，执行类型转换操作：编译器保证了这些类型转换的绝对无误。

相对于依赖程序员来记住对象类型、执行类型转换——这会导致程序运行时的失败，很难调试和解决，而编译器能够帮助程序员在编译时强制进行大量的类型检查，发现其中的错误。
<strong>泛型的构成</strong>

由泛型的构成引出了一个类型变量的概念。根据Java语言规范，类型变量是一种没有限制的标志符，产生于以下几种情况：
<ul>
	<li>泛型类声明</li>
	<li>泛型接口声明</li>
	<li>泛型方法声明</li>
	<li>泛型构造器(constructor)声明</li>
</ul>
<br/>

<strong>泛型类和接口</strong>

如果一个类或接口上有一个或多个类型变量，那它就是泛型。类型变量由尖括号界定，放在类或接口名的后面：
<code lang="java">
public interface List extends Collection {
...
}
</code>

简单的说，类型变量扮演的角色就如同一个参数，它提供给编译器用来类型检查的信息。

Java类库里的很多类，例如整个Collection框架都做了泛型化的修改。例如，我们在上面的第一段代码里用到的List接口就是一个泛型类。在那段代码里，box是一个List对象，它是一个带有一个Apple类型变量的List接口的类实现的实例。编译器使用这个类型变量参数在get方法被调用、返回一个Apple对象时自动对其进行类型转换。

实际上，这新出现的泛型标记，或者说这个List接口里的get方法是这样的：
<code lang="java">
T get(int index);
</code>
get方法实际返回的是一个类型为T的对象，T是在List声明中的类型变量。
<br/>
<strong>泛型方法和构造器(Constructor)</strong>

非常的相似，如果方法和构造器上声明了一个或多个类型变量，它们也可以泛型化。
<code lang="java">
public static T getFirst(List list)
</code>
这个方法将会接受一个List类型的参数，返回一个T类型的对象。
例子

你既可以使用Java类库里提供的泛型类，也可以使用自己的泛型类。

类型安全的写入数据…

下面的这段代码是个例子，我们创建了一个List&lt;String&gt;实例，然后装入一些数据：
<code lang="java">
List str = new ArrayList();
str.add("Hello ");
str.add("World.");
</code>
如果我们试图在List&lt;String&gt;装入另外一种对象，编译器就会提示错误：

<code lang="java">str.add(1); // 不能编译</code>
类型安全的读取数据…

当我们在使用List&lt;String&gt;对象时，它总能保证我们得到的是一个String对象：
<code lang="java">String myString = str.get(0);</code>

<br/>
<strong>遍历</strong>

类库中的很多类，诸如Iterator&lt;T&gt;，功能都有所增强，被泛型化。List&lt;T&gt;接口里的iterator()方法现在返回的是Iterator&lt;T&gt;，由它的T next()方法返回的对象不需要再进行类型转换，你直接得到正确的类型。
<code lang="java">
for (Iterator iter = str.iterator(); iter.hasNext();) {
String s = iter.next();
System.out.print(s);
}
</code>
<br/>
<strong>使用foreach</strong>
“for each”语法同样受益于泛型。前面的代码可以写出这样：
<code lang="java">
for (String s: str) {
System.out.print(s);
}
</code>
这样既容易阅读也容易维护。
<br/>

<strong>自动封装(Autoboxing)和自动拆封(Autounboxing)</strong>

在使用Java泛型时，autoboxing/autounboxing这两个特征会被自动的用到，就像下面的这段代码：
<code lang="java">
List ints = new ArrayList();
ints.add(0);
ints.add(1);</code>

int sum = 0;
for (int i : ints) {
sum += i;
}

然而，你要明白的一点是，封装和解封会带来性能上的损失，所有，通用要谨慎的使用。
<br/>
<strong>子类型</strong>

在Java中，跟其它具有面向对象类型的语言一样，类型的层级可以被设计成这样：
<img src="http://wkee.net/qee/wordpress/wp-content/uploads/2011/06/type-hierarchy.png" alt="" />
在Java中，类型T的子类型既可以是类型T的一个扩展，也可以是类型T的一个直接或非直接实现(如果T是一个接口的话)。因为“成为某类型的子类型”是一个具有传递性质的关系，如果类型A是B的一个子类型，B是C的子类型，那么A也是C的子类型。在上面的图中：

<ul>
	<li>FujiApple(富士苹果)是Apple的子类型</li>
	<li>Apple是Fruit(水果)的子类型</li>
	<li>FujiApple(富士苹果)是Fruit(水果)的子类型</li>
	<li>所有Java类型都是Object类型的子类型。</li>
</ul>



B类型的任何一个子类型A都可以被赋给一个类型B的声明：
<code lang="java">
Apple a = ...;
Fruit f = a;
</code>
<br/>
<strong>泛型类型的子类型</strong>

如果一个Apple对象的实例可以被赋给一个Fruit对象的声明，就像上面看到的，那么，List&lt;Apple&gt;和 List&lt;Apple&gt;之间又是个什么关系呢？更通用些，如果类型A是类型B的子类型，那C&lt;A&gt; 和 C&lt;B&gt;之间是什么关系？

答案会出乎你的意料：没有任何关系。用更通俗的话，泛型类型跟其是否子类型没有任何关系。

这意味着下面的这段代码是无效的：
<code lang="java">
List apples = ...;
List fruits = apples;
</code>
下面的同样也不允许：
<code lang="java">
List apples;
List fruits = ...;
apples = fruits;
</code>
为什么？一个苹果是一个水果，为什么一箱苹果不能是一箱水果？

在某些事情上，这种说法可以成立，但在类型(类)封装的状态和操作上不成立。如果把一箱苹果当成一箱水果会发生什么情况？
<code lang="java">
List apples = ...;
List fruits = apples;
fruits.add(new Strawberry());
</code>
如果可以这样的话，我们就可以在list里装入各种不同的水果子类型，这是绝对不允许的。

另外一种方式会让你有更直观的理解：一箱水果不是一箱苹果，因为它有可能是一箱另外一种水果，比如草莓(子类型)。
<br/>
<strong>这是一个需要注意的问题吗？</strong>

应该不是个大问题。而程序员对此感到意外的最大原因是数组和泛型类型上用法的不一致。对于泛型类型，它们和类型的子类型之间是没什么关系的。而对于数组，它们和子类型是相关的：如果类型A是类型B的子类型，那么A[]是B[]的子类型：
<code lang="java">
Apple[] apples = ...;
Fruit[] fruits = apples;
</code>

可是稍等一下！如果我们把前面的那个议论中暴露出的问题放在这里，我们仍然能够在一个apple类型的数组中加入strawberrie(草莓)对象：
<code lang="java">
Apple[] apples = new Apple[1];
Fruit[] fruits = apples;
fruits[0] = new Strawberry();
</code>
这样写真的可以编译，但是在运行时抛出ArrayStoreException异常。因为数组的这特点，在存储数据的操作上，Java运行时需要检查类型的兼容性。这种检查，很显然，会带来一定的性能问题，你需要明白这一点。

重申一下，泛型使用起来更安全，能“纠正”Java数组中这种类型上的缺陷。

现在估计你会感到很奇怪，为什么在数组上会有这种类型和子类型的关系，我来给你一个《Java Generics and Collections》这本书上给出的答案：如果它们不相关，你就没有办法把一个未知类型的对象数组传入一个方法里(不经过每次都封装成Object[])，就像下面的：

<code lang="java">void sort(Object[] o);</code>
泛型出现后，数组的这个个性已经不再有使用上的必要了(下面一部分我们会谈到这个)，实际上是应该避免使用。

<br/>
<strong>通配符</strong>

在本文的前面的部分里已经说过了泛型类型的子类型的不相关性。但有些时候，我们希望能够像使用普通类型那样使用泛型类型：
<ul>
	<li>向上造型一个泛型对象的引用</li>
	<li>向下造型一个泛型对象的引用</li>

</ul>
<br/>

<strong>向上造型一个泛型对象的引用</strong>
例如，假设我们有很多箱子，每个箱子里都装有不同的水果，我们需要找到一种方法能够通用的处理任何一箱水果。更通俗的说法，A是B的子类型，我们需要找到一种方法能够将C&lt;A&gt;类型的实例赋给一个C&lt;B&gt;类型的声明。

为了完成这种操作，我们需要使用带有通配符的扩展声明，就像下面的例子里那样：
<code lang="java">
List apples = new ArrayList();
List fruits = apples;
</code>
“? extends”是泛型类型的子类型相关性成为现实：Apple是Fruit的子类型，List&lt;Apple&gt; 是 List&lt;? extends Fruit&gt; 的子类型。
<br/>

<strong>向下造型一个泛型对象的引用</strong>

现在我来介绍另外一种通配符：? super。如果类型B是类型A的超类型(父类型)，那么C&lt;B&gt; 是 C&lt;? super A&gt; 的子类型：
<code lang="java">
List fruits = new ArrayList();
List = fruits;
</code>
<br/>
<strong>为什么使用通配符标记能行得通？</strong>

原理现在已经很明白：我们如何利用这种新的语法结构？
<code lang="java">
? extends
</code>
让我们重新看看这第二部分使用的一个例子，其中谈到了Java数组的子类型相关性：
<code lang="java">
Apple[] apples = new Apple[1];
Fruit[] fruits = apples;
fruits[0] = new Strawberry();
</code>
就像我们看到的，当你往一个声明为Fruit数组的Apple对象数组里加入Strawberry对象后，代码可以编译，但在运行时抛出异常。

现在我们可以使用通配符把相关的代码转换成泛型：因为Apple是Fruit的一个子类，我们使用? extends 通配符，这样就能将一个List&lt;Apple&gt;对象的定义赋到一个List&lt;? extends Fruit&gt;的声明上：

<code lang="java">
 Listapples = new ArrayList();
 List fruits = apples;
 fruits.add(new Strawberry());
</code>
这次，代码就编译不过去了！Java编译器会阻止你往一个Fruit list里加入strawberry。在编译时我们就能检测到错误，在运行时就不需要进行检查来确保往列表里加入不兼容的类型了。即使你往list里加入Fruit对象也不行：

<code lang="java">fruits.add(new Fruit());</code>
你没有办法做到这些。事实上你不能够往一个使用了? extends的数据结构里写入任何的值。

原因非常的简单，你可以这样想：这个? extends T 通配符告诉编译器我们在处理一个类型T的子类型，但我们不知道这个子类型究竟是什么。因为没法确定，为了保证类型安全，我们就不允许往里面加入任何这种类型的数据。另一方面，因为我们知道，不论它是什么类型，它总是类型T的子类型，当我们在读取数据时，能确保得到的数据是一个T类型的实例：

<code lang="java">Fruit get = fruits.get(0);</code>
<br/>
<strong>? super</strong>

使用 ? super 通配符一般是什么情况？让我们先看看这个：
<code lang="java">
Listfruits = new ArrayList();
List = fruits;
</code>
我们看到fruits指向的是一个装有Apple的某种超类(supertype)的List。同样的，我们不知道究竟是什么超类，但我们知道Apple和任何Apple的子类都跟它的类型兼容。既然这个未知的类型即是Apple，也是GreenApple的超类，我们就可以写入：
<code lang="java">
fruits.add(new Apple());
fruits.add(new GreenApple());
</code>
如果我们想往里面加入Apple的超类，编译器就会警告你：
<code lang="java">
fruits.add(new Fruit());
fruits.add(new Object());
</code>
因为我们不知道它是怎样的超类，所有这样的实例就不允许加入。

从这种形式的类型里获取数据又是怎么样的呢？结果表明，你只能取出Object实例：因为我们不知道超类究竟是什么，编译器唯一能保证的只是它是个Object，因为Object是任何Java类型的超类。
<br/>

<strong>存取原则和PECS法则</strong>

总结 ? extends 和 the ? super 通配符的特征，我们可以得出以下结论：

如果你想从一个数据类型里获取数据，使用 ? extends 通配符
如果你想把对象写入一个数据结构里，使用 ? super 通配符
如果你既想存，又想取，那就别用通配符。
<br/>
这就是Maurice Naftalin在他的《Java Generics and Collections》这本书中所说的存取原则，以及Joshua Bloch在他的《Effective Java》这本书中所说的PECS法则。

Bloch提醒说，这PECS是指”Producer Extends, Consumer Super”，这个更容易记忆和运用。
<br/>
[<a href="http://www.javacodegeeks.com/2011/04/java-generics-quick-tutorial.html">本文英文原文链接：Java Generics Quick Tutorial</a> ] ]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>190</wp:post_id>
		<wp:post_date>2012-03-28 15:16:18</wp:post_date>
		<wp:post_date_gmt>2012-03-28 07:16:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>java%e6%b3%9b%e5%9e%8b%e7%ae%80%e6%98%8e%e6%95%99%e7%a8%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_tag" nicename="java"><![CDATA[java]]></category>
		<category domain="category" nicename="study"><![CDATA[学习]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
