<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Jonny Zheng]]></title>
  <link href="http://jonnyzheng.github.com/atom.xml" rel="self"/>
  <link href="http://jonnyzheng.github.com/"/>
  <updated>2012-08-31T17:28:06+08:00</updated>
  <id>http://jonnyzheng.github.com/</id>
  <author>
    <name><![CDATA[Jonny]]></name>
    <email><![CDATA[mars131@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[carrierwave uploader 中传递变量]]></title>
    <link href="http://jonnyzheng.github.com/blog/2012/08/31/carrierwave-pass-params/"/>
    <updated>2012-08-31T16:29:00+08:00</updated>
    <id>http://jonnyzheng.github.com/blog/2012/08/31/carrierwave-pass-params</id>
    <content type="html"><![CDATA[<p>在carrierwave uploader中经常会用到version的功能，一般我们的写法都是在里面写死process的一些参数，比如</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line">  <span class="n">version</span> <span class="ss">:small</span> <span class="k">do</span>
</span><span class="line">    <span class="n">process</span> <span class="ss">:resize_to_fill</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">48</span><span class="p">,</span><span class="mi">48</span><span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>但是有的时候可能我们需要动态的传递一些参数进来对图片做相应的操作，比如用户在前端选择图片的头像区域，然后传到后台进行切割，这个时候需要加一个process方法, 下面的crop_area方法通过参数来截取图片中对应的区域。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"> <span class="k">def</span> <span class="nf">crop_area</span>
</span><span class="line">    <span class="n">manipulate!</span> <span class="k">do</span> <span class="o">|</span><span class="n">img</span><span class="o">|</span>
</span><span class="line">      <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>但是参数如何传进来成了问题，起初我是在 Uploader里定义了一个可访问的变量,然后在controller里将参数传递给Uploader实例，结果在crop_area里根本就访问不到Uploader里的实例变量，后来看了下源码发现carrierwave的实现逻辑貌似不能用这样的方法。于是用了一个曲线救国的方法，通过Model来传递参数：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
<span class="line-number">33</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1"># model class</span>
</span><span class="line"><span class="c1"># define attr_accessor coords</span>
</span><span class="line"><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
</span><span class="line">  <span class="kp">attr_accessor</span> <span class="ss">:coords</span>
</span><span class="line">  <span class="n">mount_uploader</span> <span class="ss">:icon</span><span class="p">,</span> <span class="no">AvatarUploader</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="c1"># controller</span>
</span><span class="line"><span class="c1"># pass the params to @user.coords</span>
</span><span class="line"><span class="k">def</span> <span class="nf">crop_icon</span>
</span><span class="line">  <span class="vi">@user</span><span class="o">.</span><span class="n">coords</span> <span class="o">=</span> <span class="n">params</span><span class="o">[</span><span class="ss">:coords</span><span class="o">]</span>
</span><span class="line">  <span class="vi">@user</span><span class="o">.</span><span class="n">icon</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">open</span><span class="p">(</span><span class="n">path</span><span class="p">)</span>
</span><span class="line">  <span class="vi">@user</span><span class="o">.</span><span class="n">save</span>
</span><span class="line">  <span class="n">redirect_to</span> <span class="ss">:action</span><span class="o">=&gt;</span> <span class="s1">&#39;basic&#39;</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line">
</span><span class="line">
</span><span class="line"><span class="c1"># Uploader</span>
</span><span class="line"><span class="c1"># the model in the function is same as @user in controll,</span>
</span><span class="line"><span class="c1"># and can be invoked inside of process method </span>
</span><span class="line"> <span class="k">def</span> <span class="nf">crop_area</span>
</span><span class="line">    <span class="n">manipulate!</span> <span class="k">do</span> <span class="o">|</span><span class="n">img</span><span class="o">|</span>
</span><span class="line">      <span class="k">unless</span> <span class="n">model</span><span class="o">.</span><span class="n">coords</span><span class="o">.</span><span class="n">nil?</span>
</span><span class="line">        <span class="n">coords</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="n">model</span><span class="o">.</span><span class="n">coords</span><span class="p">)</span>
</span><span class="line">        <span class="n">img</span><span class="o">.</span><span class="n">crop</span><span class="p">(</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">coords</span><span class="o">[</span><span class="s1">&#39;w&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">x</span><span class="si">#{</span><span class="n">coords</span><span class="o">[</span><span class="s1">&#39;h&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">+</span><span class="si">#{</span><span class="n">coords</span><span class="o">[</span><span class="s1">&#39;x&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">+</span><span class="si">#{</span><span class="n">coords</span><span class="o">[</span><span class="s1">&#39;y&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span><span class="p">)</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">      <span class="n">img</span> <span class="o">=</span> <span class="k">yield</span><span class="p">(</span><span class="n">img</span><span class="p">)</span> <span class="k">if</span> <span class="nb">block_given?</span>
</span><span class="line">      <span class="n">img</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>所以最后通过在 Model 中设置实例变量解决动态传递参数的问题。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 源码学习 1 (Rails 的初始化过程) ]]></title>
    <link href="http://jonnyzheng.github.com/blog/2012/07/15/reading-rails-1/"/>
    <updated>2012-07-15T15:27:00+08:00</updated>
    <id>http://jonnyzheng.github.com/blog/2012/07/15/reading-rails-1</id>
    <content type="html"><![CDATA[<h2 id="rails-bin-">rails bin 文件</h2>
<p>在rails 项目的目录里运行命令就会看到rails命令的路径<code>/usr/bin/rails</code>，其实是一个ruby文件，可以用编辑器打开看看：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1">#!/usr/bin/env ruby</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1"># This file was generated by RubyGems.</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line"><span class="c1"># The application &#39;railties&#39; is installed as part of a gem, and</span>
</span><span class="line"><span class="c1"># this file is here to facilitate running it.</span>
</span><span class="line"><span class="c1">#</span>
</span><span class="line">
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class="line">
</span><span class="line"><span class="n">version</span> <span class="o">=</span> <span class="s2">&quot;&gt;= 0&quot;</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="no">ARGV</span><span class="o">.</span><span class="n">first</span>
</span><span class="line">  <span class="n">str</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">.</span><span class="n">first</span>
</span><span class="line">  <span class="n">str</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="n">dup</span><span class="o">.</span><span class="n">force_encoding</span><span class="p">(</span><span class="s2">&quot;BINARY&quot;</span><span class="p">)</span> <span class="k">if</span> <span class="n">str</span><span class="o">.</span><span class="n">respond_to?</span> <span class="ss">:force_encoding</span>
</span><span class="line">  <span class="nb">p</span> <span class="n">str</span>
</span><span class="line">  <span class="k">if</span> <span class="n">str</span> <span class="o">=~</span> <span class="sr">/\A_(.*)_\z/</span>
</span><span class="line">    <span class="n">version</span> <span class="o">=</span> <span class="vg">$1</span>
</span><span class="line">    <span class="no">ARGV</span><span class="o">.</span><span class="n">shift</span>
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line">
</span><span class="line"><span class="n">gem</span> <span class="s1">&#39;railties&#39;</span><span class="p">,</span> <span class="n">version</span>
</span><span class="line"><span class="nb">load</span> <span class="no">Gem</span><span class="o">.</span><span class="n">bin_path</span><span class="p">(</span><span class="s1">&#39;railties&#39;</span><span class="p">,</span> <span class="s1">&#39;rails&#39;</span><span class="p">,</span> <span class="n">version</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>该文件做的事情主要是 <code>require rubygems</code>, 然后最后一行 load railties下面的rails，我们可以打印一下到底load了什么东西：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">p</span> <span class="no">Gem</span><span class="o">.</span><span class="n">bin_path</span><span class="p">(</span><span class="s1">&#39;railties&#39;</span><span class="p">,</span> <span class="s1">&#39;rails&#39;</span><span class="p">,</span> <span class="n">version</span><span class="p">)</span>
</span><span class="line"><span class="c1"># will out put /*/*/ruby-1.9.3-p194/gems/railties-3.2.7/bin/rails</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>然后就去看看 <code>railties-3.2.7/bin/rails</code> 里面都有什么吧，路径中的版本号只是我自己机器上使用的版本，可能和其他人的不一样，所以下面都会把路径中的版本号去掉。</p>

<h2 id="railtiesbinrails">railties/bin/rails</h2>

<p>这里面也很简单，基本上只是设置环境，</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1">#!/usr/bin/env ruby</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../../..&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">),</span> <span class="s1">&#39;.git&#39;</span><span class="p">))</span>
</span><span class="line">  <span class="n">railties_path</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../../lib&#39;</span><span class="p">,</span> <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class="line">  <span class="vg">$:</span><span class="o">.</span><span class="n">unshift</span><span class="p">(</span><span class="n">railties_path</span><span class="p">)</span>
</span><span class="line"><span class="k">end</span>
</span><span class="line"><span class="nb">require</span> <span class="s2">&quot;rails/cli&quot;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最后require了 <code>railties/lib/rails/cli.rb</code> 这个文件:</p>

<h2 id="railtieslibrailsclirb">railties/lib/rails/cli.rb</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;rbconfig&#39;</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;rails/script_rails_loader&#39;</span>
</span><span class="line">
</span><span class="line"><span class="c1"># If we are inside a Rails application this method performs an exec and thus</span>
</span><span class="line"><span class="c1"># the rest of this script is not run.</span>
</span><span class="line"><span class="no">Rails</span><span class="o">::</span><span class="no">ScriptRailsLoader</span><span class="o">.</span><span class="n">exec_script_rails!</span>
</span><span class="line">
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;rails/ruby_version_check&#39;</span>
</span><span class="line"><span class="no">Signal</span><span class="o">.</span><span class="n">trap</span><span class="p">(</span><span class="s2">&quot;INT&quot;</span><span class="p">)</span> <span class="p">{</span> <span class="nb">puts</span><span class="p">;</span> <span class="nb">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span> <span class="p">}</span>
</span><span class="line">
</span><span class="line"><span class="k">if</span> <span class="no">ARGV</span><span class="o">.</span><span class="n">first</span> <span class="o">==</span> <span class="s1">&#39;plugin&#39;</span>
</span><span class="line">  <span class="no">ARGV</span><span class="o">.</span><span class="n">shift</span>
</span><span class="line">  <span class="nb">require</span> <span class="s1">&#39;rails/commands/plugin_new&#39;</span>
</span><span class="line"><span class="k">else</span>
</span><span class="line">  <span class="nb">require</span> <span class="s1">&#39;rails/commands/application&#39;</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>第一行的rbconfig是ruby standlib, 可以用来知道当前环境ruby的path，第二行引用的就是rails的装载脚本了，下面的 <code>Rails::ScriptRailsLoader.exec_script_rails!</code> 方法就是在里面定义的</p>

<h2 id="railtieslibrailsscriptrailsloaderrb">railties/lib/rails/script_rails_loader.rb</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">module</span> <span class="nn">Rails</span>
</span><span class="line">  <span class="k">module</span> <span class="nn">ScriptRailsLoader</span>
</span><span class="line">    <span class="no">RUBY</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="o">*</span><span class="no">RbConfig</span><span class="o">::</span><span class="no">CONFIG</span><span class="o">.</span><span class="n">values_at</span><span class="p">(</span><span class="s2">&quot;bindir&quot;</span><span class="p">,</span> <span class="s2">&quot;ruby_install_name&quot;</span><span class="p">))</span> <span class="o">+</span> <span class="no">RbConfig</span><span class="o">::</span><span class="no">CONFIG</span><span class="o">[</span><span class="s2">&quot;EXEEXT&quot;</span><span class="o">]</span>
</span><span class="line">    <span class="no">SCRIPT_RAILS</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;script&#39;</span><span class="p">,</span> <span class="s1">&#39;rails&#39;</span><span class="p">)</span>
</span><span class="line">
</span><span class="line">    <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">exec_script_rails!</span>
</span><span class="line">      <span class="n">cwd</span> <span class="o">=</span> <span class="no">Dir</span><span class="o">.</span><span class="n">pwd</span>
</span><span class="line">      <span class="k">return</span> <span class="k">unless</span> <span class="n">in_rails_application?</span> <span class="o">||</span> <span class="n">in_rails_application_subdirectory?</span>
</span><span class="line">      <span class="nb">exec</span> <span class="no">RUBY</span><span class="p">,</span> <span class="no">SCRIPT_RAILS</span><span class="p">,</span> <span class="o">*</span><span class="no">ARGV</span> <span class="k">if</span> <span class="n">in_rails_application?</span>
</span><span class="line">	  <span class="o">.</span><span class="n">.</span><span class="o">.</span>	
</span><span class="line">    <span class="k">rescue</span> <span class="no">SystemCallError</span>
</span><span class="line">      <span class="c1"># could not chdir, no problem just return</span>
</span><span class="line">    <span class="k">end</span>
</span><span class="line">
</span><span class="line">    <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class="line">
</span><span class="line">  <span class="k">end</span>
</span><span class="line"><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在 <code>self.exec_script_rails</code> 方法里就是真正的调用rails项目里 <code>script/rails</code> 这个文件啦, 这个文件在每个项目里都有的， 让我们再回到项目里看看这个文件</p>

<h2 id="rails--scriptrails">rails 项目中的 script/rails</h2>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="c1">#!/usr/bin/env ruby</span>
</span><span class="line"><span class="c1"># This command will automatically be run when you run &quot;rails&quot; with Rails 3 gems installed from the root of your application.</span>
</span><span class="line">
</span><span class="line"><span class="no">APP_PATH</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../../config/application&#39;</span><span class="p">,</span>  <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class="line"><span class="nb">require</span> <span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../../config/boot&#39;</span><span class="p">,</span>  <span class="bp">__FILE__</span><span class="p">)</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;rails/commands&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这里require了 项目中的<code>config/boot.rb</code> 文件，它的主要作用是通过Bundle 把Gemfile 里的Gems都引用进来。最后一步 <code>require 'rails/commands'</code> 是真正更具我们输入的命令做执行的地方，比如 <code>rails s</code>,<code>rails c</code>, <code>rails g</code> 都是在这里做的判断。</p>

<h2 id="railtieslibrailscommandsrb">railties/lib/rails/commands.rb</h2>

<p>这里看看 启动server的片段</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="k">when</span> <span class="s1">&#39;server&#39;</span>
</span><span class="line">  <span class="c1"># Change to the application&#39;s path if there is no config.ru file in current dir.</span>
</span><span class="line">  <span class="c1"># This allows us to run script/rails server from other directories, but still get</span>
</span><span class="line">  <span class="c1"># the main config.ru and properly set the tmp directory.</span>
</span><span class="line">  <span class="no">Dir</span><span class="o">.</span><span class="n">chdir</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s1">&#39;../../&#39;</span><span class="p">,</span> <span class="no">APP_PATH</span><span class="p">))</span> <span class="k">unless</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">expand_path</span><span class="p">(</span><span class="s2">&quot;config.ru&quot;</span><span class="p">))</span>
</span><span class="line">
</span><span class="line">  <span class="nb">require</span> <span class="s1">&#39;rails/commands/server&#39;</span>
</span><span class="line">  <span class="no">Rails</span><span class="o">::</span><span class="no">Server</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">tap</span> <span class="p">{</span> <span class="o">|</span><span class="n">server</span><span class="o">|</span>
</span><span class="line">    <span class="c1"># We need to require application after the server sets environment,</span>
</span><span class="line">    <span class="c1"># otherwise the --environment option given to the server won&#39;t propagate.</span>
</span><span class="line">    <span class="nb">require</span> <span class="no">APP_PATH</span>
</span><span class="line">    <span class="no">Dir</span><span class="o">.</span><span class="n">chdir</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">application</span><span class="o">.</span><span class="n">root</span><span class="p">)</span>
</span><span class="line">    <span class="n">server</span><span class="o">.</span><span class="n">start</span>
</span><span class="line">  <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这里最主要的就是调用了 	<code>rails/commnads/server</code> 该文件里定义了 server.start 方法。</p>

<h2 id="railtieslibrailscommandsserverrb">railties/lib/rails/commands/server.rb</h2>

<p>这个文件里主要是在 initialize的时候设置sever 的一些参数，再就是start</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"> <span class="k">def</span> <span class="nf">start</span>
</span><span class="line">      <span class="n">url</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">options</span><span class="o">[</span><span class="ss">:SSLEnable</span><span class="o">]</span> <span class="p">?</span> <span class="s1">&#39;https&#39;</span> <span class="p">:</span> <span class="s1">&#39;http&#39;</span><span class="si">}</span><span class="s2">://</span><span class="si">#{</span><span class="n">options</span><span class="o">[</span><span class="ss">:Host</span><span class="o">]</span><span class="si">}</span><span class="s2">:</span><span class="si">#{</span><span class="n">options</span><span class="o">[</span><span class="ss">:Port</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">      <span class="nb">puts</span> <span class="s2">&quot;=&gt; Booting </span><span class="si">#{</span><span class="no">ActiveSupport</span><span class="o">::</span><span class="no">Inflector</span><span class="o">.</span><span class="n">demodulize</span><span class="p">(</span><span class="n">server</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">      <span class="nb">puts</span> <span class="s2">&quot;=&gt; Rails </span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">version</span><span class="si">}</span><span class="s2"> application starting in </span><span class="si">#{</span><span class="no">Rails</span><span class="o">.</span><span class="n">env</span><span class="si">}</span><span class="s2"> on </span><span class="si">#{</span><span class="n">url</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class="line">      <span class="nb">puts</span> <span class="s2">&quot;=&gt; Call with -d to detach&quot;</span> <span class="k">unless</span> <span class="n">options</span><span class="o">[</span><span class="ss">:daemonize</span><span class="o">]</span>
</span><span class="line">      <span class="nb">trap</span><span class="p">(</span><span class="ss">:INT</span><span class="p">)</span> <span class="p">{</span> <span class="nb">exit</span> <span class="p">}</span>
</span><span class="line">      <span class="nb">puts</span> <span class="s2">&quot;=&gt; Ctrl-C to shutdown server&quot;</span> <span class="k">unless</span> <span class="n">options</span><span class="o">[</span><span class="ss">:daemonize</span><span class="o">]</span>
</span><span class="line">
</span><span class="line">      <span class="c1">#Create required tmp directories if not found</span>
</span><span class="line">      <span class="sx">%w(cache pids sessions sockets)</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">dir_to_make</span><span class="o">|</span>
</span><span class="line">        <span class="no">FileUtils</span><span class="o">.</span><span class="n">mkdir_p</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="s1">&#39;tmp&#39;</span><span class="p">,</span> <span class="n">dir_to_make</span><span class="p">))</span>
</span><span class="line">      <span class="k">end</span>
</span><span class="line">
</span><span class="line">      <span class="k">super</span>
</span><span class="line">    <span class="k">ensure</span>
</span><span class="line">      <span class="c1"># The &#39;-h&#39; option calls exit before @options is set.</span>
</span><span class="line">      <span class="c1"># If we call &#39;options&#39; with it unset, we get double help banners.</span>
</span><span class="line">      <span class="nb">puts</span> <span class="s1">&#39;Exiting&#39;</span> <span class="k">unless</span> <span class="vi">@options</span> <span class="o">&amp;&amp;</span> <span class="n">options</span><span class="o">[</span><span class="ss">:daemonize</span><span class="o">]</span>
</span><span class="line">  <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>这时你就知道在 <code>rails s</code> 的时候显示的几行文字是从这里打印出来的了，最后他会调用 Rack::Server.start 方法，也就是父类方法.</p>

<h2 id="actionpacklibactiondispatchrb">actionpack/lib/action_dispatch.rb</h2>

<p>在 <code>server.rb</code> 里还require了 <code>action_dispatch</code>，这个文件在 Gem <code>action_pack</code> 目录下,
文件里引入了大部分rails需要的模块，包括：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class="ruby"><span class="line"><span class="nb">require</span> <span class="s1">&#39;active_support&#39;</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;active_support/dependencies/autoload&#39;</span>
</span><span class="line">
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;action_pack&#39;</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;active_model&#39;</span>
</span><span class="line"><span class="nb">require</span> <span class="s1">&#39;rack&#39;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>
<p>接下来就是rack server了</p>

<h2 id="racklibserverrb">rack/lib/server.rb</h2>

<p>rack 提供了统一的最简单的web server和应用程序之间的接口，所有的应用程序和web server都可以基于这个开发，大大节省了工作量和兼容问题，比如 rails 可以在自带的webserver webrick 跑，也可以在unicorn， thin，passanger 等webserver上跑，因为大家都是基于rack做的实现。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Java泛型简明教程]]></title>
    <link href="http://jonnyzheng.github.com/blog/2012/03/28/java-fan-xing-jian-ming-jiao-cheng/"/>
    <updated>2012-03-28T00:00:00+08:00</updated>
    <id>http://jonnyzheng.github.com/blog/2012/03/28/java-fan-xing-jian-ming-jiao-cheng</id>
    <content type="html"><![CDATA[<p>转自<a href="http://www.aqee.net/java-generics-quick-tutorial/">外刊it评论</a></p>

<p>泛型是Java SE 5.0中引入的一项特征，自从这项语言特征出现多年来，我相信，几乎所有的Java程序员不仅听说过，而且使用过它。关于Java泛型的教程，免费的，不免费的，有很多。我遇到的最好的教材有：</p>

<p><a href="http://download.oracle.com/javase/tutorial/">The Java Tutorial</a>
<a href="http://bit.ly/jAzfIt">Java Generics and Collections</a>, by Maurice Naftalin and Philip Wadler
<a href="http://goo.gl/ixwNn">Effective Java中文版(第2版)</a>, by Joshua Bloch.</p>

<p>尽管有这么多丰富的资料，有时我感觉，有很多的程序员仍然不太明白Java泛型的功用和意义。这就是为什么我想使用一种最简单的形式来总结一下程序员需要知道的关于Java泛型的最基本的知识。
<br /><strong>Java泛型由来的动机</strong></p>

<p>理解Java泛型最简单的方法是把它看成一种便捷语法，能节省你某些Java类型转换(casting)上的操作：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">List&lt;Apple&gt; box = ...;
</span><span class="line">Apple apple = box.get(0);</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>上面的代码自身已表达的很清楚：box是一个装有Apple对象的List。get方法返回一个Apple对象实例，这个过程不需要进行类型转换。没有泛型，上面的代码需要写成这样：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">List box = ...;
</span><span class="line">Apple apple = (Apple) box.get(0);</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>很明显，泛型的主要好处就是让编译器保留参数的类型信息，执行类型检查，执行类型转换操作：编译器保证了这些类型转换的绝对无误。</p>

<p>相对于依赖程序员来记住对象类型、执行类型转换——这会导致程序运行时的失败，很难调试和解决，而编译器能够帮助程序员在编译时强制进行大量的类型检查，发现其中的错误。</p>

<h4 id="section">泛型的构成</h4>
<p>由泛型的构成引出了一个类型变量的概念。根据Java语言规范，类型变量是一种没有限制的标志符，产生于以下几种情况：</p>

<ul>
  <li>泛型类声明</li>
  <li>泛型接口声明</li>
  <li>泛型方法声明</li>
  <li>泛型构造器(constructor)声明</li>
</ul>

<h4 id="section-1">泛型类和接口</h4>
<p>如果一个类或接口上有一个或多个类型变量，那它就是泛型。类型变量由尖括号界定，放在类或接口名的后面：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">public interface List&lt;T&gt; extends Collection&lt;T&gt; {
</span><span class="line">	...
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>简单的说，类型变量扮演的角色就如同一个参数，它提供给编译器用来类型检查的信息。</p>

<p>Java类库里的很多类，例如整个Collection框架都做了泛型化的修改。例如，我们在上面的第一段代码里用到的List接口就是一个泛型类。在那段代码里，box是一个List对象，它是一个带有一个Apple类型变量的List接口的类实现的实例。编译器使用这个类型变量参数在get方法被调用、返回一个Apple对象时自动对其进行类型转换。</p>

<p>实际上，这新出现的泛型标记，或者说这个List接口里的get方法是这样的：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">T get(int index);</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>get方法实际返回的是一个类型为T的对象，T是在List声明中的类型变量。</p>

<h4 id="constructorstrong">泛型方法和构造器(Constructor)&lt;/strong&gt;</h4>

<p>非常的相似，如果方法和构造器上声明了一个或多个类型变量，它们也可以泛型化。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">public static &lt;t&gt; T getFirst(List&lt;T&gt; list)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这个方法将会接受一个List类型的参数，返回一个T类型的对象。</p>

<p>你既可以使用Java类库里提供的泛型类，也可以使用自己的泛型类。
类型安全的写入数据…
下面的这段代码是个例子，我们创建了一个List<string>实例，然后装入一些数据：</string></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">List&lt;String&gt; str = new ArrayList&lt;String&gt;();
</span><span class="line">str.add("Hello ");
</span><span class="line">str.add("World.");</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果我们试图在List<string>装入另外一种对象，编译器就会提示错误：</string></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">str.add(1); // 不能编译</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>类型安全的读取数据…</p>

<p>当我们在使用List<string>对象时，它总能保证我们得到的是一个String对象：</string></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">String myString = str.get(0);</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-2">遍历</h4>
<p>类库中的很多类，诸如Iterator<t>，功能都有所增强，被泛型化。List<t>接口里的iterator()方法现在返回的是Iterator<t>，由它的T next()方法返回的对象不需要再进行类型转换，你直接得到正确的类型。</t></t></t></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">for (Iterator&lt;String&gt; iter = str.iterator(); iter.hasNext();) {
</span><span class="line">    String s = iter.next();
</span><span class="line">    System.out.print(s);
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="foreach">使用foreach</h4>
<p>“for each”语法同样受益于泛型。前面的代码可以写出这样：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">for (String s: str) {
</span><span class="line">    System.out.print(s);
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样既容易阅读也容易维护。
####自动封装(Autoboxing)和自动拆封(Autounboxing)</p>

<p>在使用Java泛型时，autoboxing/autounboxing这两个特征会被自动的用到，就像下面的这段代码：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class=""><span class="line">List&lt;Integer&gt; ints = new ArrayList&lt;Integer&gt;();
</span><span class="line">ints.add(0);
</span><span class="line">ints.add(1);
</span><span class="line"> 
</span><span class="line">int sum = 0;
</span><span class="line">for (int i : ints) {
</span><span class="line">    sum += i;
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>然而，你要明白的一点是，封装和解封会带来性能上的损失，所有，通用要谨慎的使用。</p>

<h4 id="section-3">子类型</h4>

<p>在Java中，跟其它具有面向对象类型的语言一样，类型的层级可以被设计成这样：
<img src="http://wkee.net/qee/wordpress/wp-content/uploads/2011/06/type-hierarchy.png" /></p>

<p>在Java中，类型T的子类型既可以是类型T的一个扩展，也可以是类型T的一个直接或非直接实现(如果T是一个接口的话)。因为“成为某类型的子类型”是一个具有传递性质的关系，如果类型A是B的一个子类型，B是C的子类型，那么A也是C的子类型。在上面的图中：</p>

<ul>
  <li>FujiApple(富士苹果)是Apple的子类型</li>
  <li>Apple是Fruit(水果)的子类型</li>
  <li>FujiApple(富士苹果)是Fruit(水果)的子类型</li>
  <li>所有Java类型都是Object类型的子类型。</li>
</ul>

<p>B类型的任何一个子类型A都可以被赋给一个类型B的声明：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Apple a = ...;
</span><span class="line">Fruit f = a;</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="section-4">泛型类型的子类型</h4>

<p>如果一个Apple对象的实例可以被赋给一个Fruit对象的声明，就像上面看到的，那么，<code>List&lt;Apple&gt;</code> 和 <code>List&lt;Apple&gt;</code> 之间又是个什么关系呢？更通用些，如果类型A是类型B的子类型，那 <code>C&lt;A&gt;</code> 和 <code>C&lt;B&gt;</code> 之间是什么关系？
答案会出乎你的意料：没有任何关系。用更通俗的话，泛型类型跟其是否子类型没有任何关系。
这意味着下面的这段代码是无效的：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">List&lt;Apple&gt; apples = ...;
</span><span class="line">List&lt;Fruit&gt; fruits = apples;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>下面的同样也不允许：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">List&lt;Apple&gt; apples;
</span><span class="line">List&lt;Fruit&gt; fruits = ...;
</span><span class="line">apples = fruits;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>为什么？一个苹果是一个水果，为什么一箱苹果不能是一箱水果？</p>

<p>在某些事情上，这种说法可以成立，但在类型(类)封装的状态和操作上不成立。如果把一箱苹果当成一箱水果会发生什么情况？</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">List apples = ...;
</span><span class="line">List fruits = apples;
</span><span class="line">fruits.add(new Strawberry());</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果可以这样的话，我们就可以在list里装入各种不同的水果子类型，这是绝对不允许的。</p>

<p>另外一种方式会让你有更直观的理解：一箱水果不是一箱苹果，因为它有可能是一箱另外一种水果，比如草莓(子类型)。
<br /><strong>这是一个需要注意的问题吗？</strong></p>

<p>应该不是个大问题。而程序员对此感到意外的最大原因是数组和泛型类型上用法的不一致。对于泛型类型，它们和类型的子类型之间是没什么关系的。而对于数组，它们和子类型是相关的：如果类型A是类型B的子类型，那么A[]是B[]的子类型：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Apple[] apples = ...;
</span><span class="line">Fruit[] fruits = apples;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>可是稍等一下！如果我们把前面的那个议论中暴露出的问题放在这里，我们仍然能够在一个apple类型的数组中加入strawberrie(草莓)对象：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Apple[] apples = new Apple[1];
</span><span class="line">Fruit[] fruits = apples;
</span><span class="line">fruits[0] = new Strawberry();</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这样写真的可以编译，但是在运行时抛出ArrayStoreException异常。因为数组的这特点，在存储数据的操作上，Java运行时需要检查类型的兼容性。这种检查，很显然，会带来一定的性能问题，你需要明白这一点。</p>

<p>重申一下，泛型使用起来更安全，能“纠正”Java数组中这种类型上的缺陷。</p>

<p>现在估计你会感到很奇怪，为什么在数组上会有这种类型和子类型的关系，我来给你一个《Java Generics and Collections》这本书上给出的答案：如果它们不相关，你就没有办法把一个未知类型的对象数组传入一个方法里(不经过每次都封装成Object[])，就像下面的：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">void sort(Object[] o);</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>泛型出现后，数组的这个个性已经不再有使用上的必要了(下面一部分我们会谈到这个)，实际上是应该避免使用。</p>

<h4 id="section-5">通配符</h4>
<p>在本文的前面的部分里已经说过了泛型类型的子类型的不相关性。但有些时候，我们希望能够像使用普通类型那样使用泛型类型：</p>

<p>*向上造型一个泛型对象的引用
*向下造型一个泛型对象的引用</p>

<h4 id="section-6">向上造型一个泛型对象的引用</h4>
<p>例如，假设我们有很多箱子，每个箱子里都装有不同的水果，我们需要找到一种方法能够通用的处理任何一箱水果。更通俗的说法，A是B的子类型，我们需要找到一种方法能够将 <code>C&lt;A&gt;</code> 类型的实例赋给一个 <code>C&lt;B&gt;</code> 类型的声明。</p>

<p>为了完成这种操作，我们需要使用带有通配符的扩展声明，就像下面的例子里那样：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">List&lt;Apple&gt; apples = new ArrayList&lt;Apple&gt;();
</span><span class="line">List&lt;? extends Fruit&gt; fruits = apples;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>“? extends”是泛型类型的子类型相关性成为现实：Apple是Fruit的子类型，List<apple> 是 List&lt;? extends Fruit&gt; 的子类型。
####向下造型一个泛型对象的引用</apple></p>

<p>现在我来介绍另外一种通配符：<code>? super</code> 。如果类型B是类型A的超类型(父类型)，那么 <code>C&lt;B&gt;</code> 是 <code>C&lt;? super A&gt;</code> 的子类型：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">List&lt;Fruit&gt; fruits = new ArrayList&lt;Fruit&gt;();
</span><span class="line">List&lt;? super Apple&gt; = fruits;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p><br /><strong>为什么使用通配符标记能行得通？</strong></p>

<p>原理现在已经很明白：我们如何利用这种新的语法结构？</p>

<h4 id="extends">? extends</h4>

<p>让我们重新看看这第二部分使用的一个例子，其中谈到了Java数组的子类型相关性：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Apple[] apples = new Apple[1];
</span><span class="line">Fruit[] fruits = apples;
</span><span class="line">fruits[0] = new Strawberry();</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>就像我们看到的，当你往一个声明为Fruit数组的Apple对象数组里加入Strawberry对象后，代码可以编译，但在运行时抛出异常。</p>

<p>现在我们可以使用通配符把相关的代码转换成泛型：因为Apple是Fruit的一个子类，我们使用? extends 通配符，这样就能将一个 <code>List&lt;Apple&gt;</code> 对象的定义赋到一个 <code>List&lt;? extends Fruit&gt;</code> 的声明上：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">List&lt;Apple&gt; apples = new ArrayList&lt;Apple&gt;();
</span><span class="line">List&lt;? extends Fruit&gt; fruits = apples;
</span><span class="line">fruits.add(new Strawberry());</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这次，代码就编译不过去了！Java编译器会阻止你往一个Fruit list里加入strawberry。在编译时我们就能检测到错误，在运行时就不需要进行检查来确保往列表里加入不兼容的类型了。即使你往list里加入Fruit对象也不行：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">fruits.add(new Fruit());</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>你没有办法做到这些。事实上你不能够往一个使用了? extends的数据结构里写入任何的值。</p>

<p>原因非常的简单，你可以这样想：这个? extends T 通配符告诉编译器我们在处理一个类型T的子类型，但我们不知道这个子类型究竟是什么。因为没法确定，为了保证类型安全，我们就不允许往里面加入任何这种类型的数据。另一方面，因为我们知道，不论它是什么类型，它总是类型T的子类型，当我们在读取数据时，能确保得到的数据是一个T类型的实例：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Fruit get = fruits.get(0);</span></code></pre></td></tr></table></div></figure></notextile></div>

<h4 id="super">? super</h4>

<p>使用 ? super 通配符一般是什么情况？让我们先看看这个：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">List&lt;Fruit&gt; fruits = new ArrayList&lt;Fruit&gt;();
</span><span class="line">List&lt;? super Apple&gt; = fruits;</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我们看到fruits指向的是一个装有Apple的某种超类(supertype)的List。同样的，我们不知道究竟是什么超类，但我们知道Apple和任何Apple的子类都跟它的类型兼容。既然这个未知的类型即是Apple，也是GreenApple的超类，我们就可以写入：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">fruits.add(new Apple());
</span><span class="line">fruits.add(new GreenApple());</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>如果我们想往里面加入Apple的超类，编译器就会警告你：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">fruits.add(new Fruit());
</span><span class="line">fruits.add(new Object());</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>因为我们不知道它是怎样的超类，所有这样的实例就不允许加入。</p>

<p>从这种形式的类型里获取数据又是怎么样的呢？结果表明，你只能取出Object实例：因为我们不知道超类究竟是什么，编译器唯一能保证的只是它是个Object，因为Object是任何Java类型的超类。</p>

<h4 id="pecs">存取原则和PECS法则</h4>

<p>总结 ? extends 和 the ? super 通配符的特征，我们可以得出以下结论：</p>

<p>如果你想从一个数据类型里获取数据，使用 ? extends 通配符
如果你想把对象写入一个数据结构里，使用 ? super 通配符
如果你既想存，又想取，那就别用通配符。
<br />
这就是Maurice Naftalin在他的《Java Generics and Collections》这本书中所说的存取原则，以及Joshua Bloch在他的《Effective Java》这本书中所说的PECS法则。</p>

<p>Bloch提醒说，这PECS是指”Producer Extends, Consumer Super”，这个更容易记忆和运用。
<br />
[<a href="http://www.javacodegeeks.com/2011/04/java-generics-quick-tutorial.html">本文英文原文链接：Java Generics Quick Tutorial</a> ] </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[37signals倡导及实践的8个理念]]></title>
    <link href="http://jonnyzheng.github.com/blog/2012/03/20/37signals-chang-dao-ji-shi-jian-de-8-ge-li-nian/"/>
    <updated>2012-03-20T00:00:00+08:00</updated>
    <id>http://jonnyzheng.github.com/blog/2012/03/20/37signals-chang-dao-ji-shi-jian-de-8-ge-li-nian</id>
    <content type="html"><![CDATA[<p>转贴：以此为标准铭记于心</p>

<p>在软件设计界，37signals是非常受欢迎的一个小团队，对于Geek更是如此。不仅因为其自身产品的简洁、精益，更在于其对自身理念的实践。同时他们出版的书籍深受欢迎，特别是《Getting Real》及《Rework》。下面让我们看看他们所倡导的8个理念，对于产品设计、企业管理甚至个人素养都具有一定参考价值。
<br /><strong>可用性才是永恒</strong>
其它一切都可能消失，唯可用性永远不会。我们只建立你需要的软件，其它一切都是多余。
<br /><strong>优质的服务就是一切</strong>
我们以快速和友好的客户服务著称，每天都努力确保这份荣誉。
<br /><strong>简洁清晰是王道</strong>
在37signals，口号、术语以及任何吹嘘式语言将无立足之地。我们的沟通讲求清晰与真诚。
<br /><strong>客户就是投资者</strong>
我们的客户通过购买产品支持我们的日常运作，我们向他们汇报工作，而不是投资人、市场或者董事会。
<br /><strong>基础的元素最美</strong>
我们从不会忽略真正重要的东西：基础元素、优质服务、易用性、可靠的价格以及对我们客户时间、金钱与信任的尊重。
<br /><strong>定价公开</strong>
我们相信我们提供的价格是公道的，所有的价格面向所有人公开。
<br /><strong>软件需要简单容易</strong>
我们的产品都具有直觉性，打开软件几分钟就可上手，而非花上几天甚至几周时间。我们不会给你培训而收费，因为你根本不需要。
<br /><strong>长期合作是可憎的</strong>
没有人愿意将自己绑在一件不喜欢的事情上。我们的客户可以随时取消合作。
<br /></p>

<p>转自36氪 <a href="http://www.36kr.com/p/92141.html" title="37signals倡导及实践的8个理念">37signals倡导及实践的8个理念</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sublime 下配置vim模式]]></title>
    <link href="http://jonnyzheng.github.com/blog/2012/03/12/sublime--xia-pei-zhi-vim-mo-shi/"/>
    <updated>2012-03-12T00:00:00+08:00</updated>
    <id>http://jonnyzheng.github.com/blog/2012/03/12/sublime&#8211;xia-pei-zhi-vim-mo-shi</id>
    <content type="html"><![CDATA[<p>最近用上了sublime text2， 和textmate比界面要漂亮一些，而且几个平台下都有对应版本，比较统一。</p>

<p>sublime支持文本编辑使用 vim 模式，vim 快捷键编辑文本还是挺快的，两个编辑器融合一下也挺好，选择Preferences-&gt;Settings- Default, 在文本的最下面有一行 </p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">"ignored_packages": ["vintage"]</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>，这里sublime 默认去掉了vim的支持，我们只需要把”vintage”删掉就好了。</p>

<p>再在编辑框里试试已经ok了，但是在vim里我都把ESC键映射到了’ii’上了： imap ‘ii’ <esc> ，这里并不支持imap。 不过我们可以在vintage 的package包里自己定义，我的机器是windows,默认packages都装在了 C:\Documents and Settings\zhengj1\Application Data\Sublime Text 2\Packages 目录下，找到Vintage\Default.sublime-keymap文件，用文本编辑器打开，加上下面的代码：</esc></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">"ignored_packages": ["vintage"]</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>这个keymap文件里可以定义自己习惯的快捷键方式，有兴趣的不妨研究研究。</p>

<p>vintage这个插件并不支持command， 想要支持还需要下一个<a href="https://github.com/SublimeText/VintageEx" title="VintageEx">VintageEx </a>包，一些简单的命令就可以用了。&lt;/esc&gt;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于Jquery offset().top 在IE和Firefox下行为不一致的问题]]></title>
    <link href="http://jonnyzheng.github.com/blog/2012/03/02/guan-yu-jquery-offset-top--zai-ie-he-firefox-xia-xing-wei-bu-yi-zhi-de-wen-ti/"/>
    <updated>2012-03-02T00:00:00+08:00</updated>
    <id>http://jonnyzheng.github.com/blog/2012/03/02/guan-yu-jquery-offset-top&#8211;zai-ie-he-firefox-xia-xing-wei-bu-yi-zhi-de-wen-ti</id>
    <content type="html"><![CDATA[<p>项目中用到了JSTree,原先一个页面里包含了很多的tab标签，而且每个tab标签内功能都很多，用到了大量的js代码，后来我们决定把tab里的内容分成不同的page，然后用iframe调用。</p>

<p>于是奇怪的问题出现了，在IE下面拖动滚动条后jstree的node怎么也点不了了，像事件丢失了一样。调试了一会貌似不是我代码的原因，于是到JSTree的源码里看看，结果看到下面这一句，他计算的事件点击在页面的position要在node的li高度范围内，这个不知道为啥要这样做，很是奇怪，但是这就是为什么在iframe里会出怪问题的原因。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
</pre></td><td class="code"><pre><code class=""><span class="line">if(trgt.is("ins") &amp;&amp; event.pageY - trgt.offset().top &lt; this.data.core.li_height)
</span><span class="line">{
</span><span class="line">    this.toggle_node(trgt);
</span><span class="line">}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>在ie下面当右边滚动条滚动后$(element).offset().top计算出来的值就不对了，必须要加document.documentElement.scrollTop 的值才能得到正确的结果，迫不得已，修补bug如下</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
</pre></td><td class="code"><pre><code class=""><span class="line">var posY = 0;
</span><span class="line">if(window.parent!= window &amp;&amp; $.browser.msie)
</span><span class="line">    posY= (trgt.offset().top+document.documentElement.scrollTop);
</span><span class="line">else
</span><span class="line">    posY= trgt.offset().top;
</span><span class="line">if(trgt.is("ins") &amp;&amp; event.pageY - posY &lt; this.data.core.li_height) { this.toggle_node(trgt); }</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>Jquery里也有人提到这个问题，新版的JSTree里已经修复此bug， 附上地址供参考</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[根据IP获得城市名称 Ruby 版]]></title>
    <link href="http://jonnyzheng.github.com/blog/2012/01/06/gen-ju-ip-huo-de-cheng-shi-ming-cheng--ruby--ban/"/>
    <updated>2012-01-06T00:00:00+08:00</updated>
    <id>http://jonnyzheng.github.com/blog/2012/01/06/gen-ju-ip-huo-de-cheng-shi-ming-cheng&#8211;ruby&#8211;ban</id>
    <content type="html"><![CDATA[<p>很多本地化生活网站的一个基本功能就是根据用户的IP地址判断所在的城市，基本的逻辑就是有一个ip库，根据ip库里的记录找到用户ip地址所在的范围。</p>

<p>IP库没有太多选择，我在网上找到的一个<a href="http://www.maxmind.com/app/ip-location">http://www.maxmind.com/app/ip-location</a>， 这个网站本身提供收费的IP库和免费的IP库，收费的库在准确率上要稍微高一些，拿城市的库做一个例子，左边是免费版，右边是收费版：</p>

<table><tbody>
<tr>
<th />
<td>GeoLite City</td>
<td><span style="color: #000000;"><a href="http://www.maxmind.com/app/city"><span style="color: #000000;">GeoIP City</span></a></span></td>
</tr>
<tr>
<td>Cost</td>
<td>Free</td>
<td>$370 initial, $90 per month updates</td>
</tr>
<tr>
<td>Coverage</td>
<td>Worldwide</td>
<td>Worldwide</td>
</tr>
<tr>
<td>Accuracy</td>
<td>Over 99.5% on a country level and 79% on a city level for the US within a 25 mile radius. <a href="http://www.maxmind.com/app/geolite_city_accuracy">More details</a>
</td>
<td>Over 99.8% on a country level and 83% on a city level for the US within a 25 mile radius. <a href="http://www.maxmind.com/app/city_accuracy">More details</a>
</td>
</tr>
<tr>
<td>Redistribution</td>
<td>Free, subject to GPL/LGPL for APIs and <a href="http://geolite.maxmind.com/download/geoip/database/LICENSE.txt">database license</a>. <a href="http://www.maxmind.com/app/builder">Commercial redistribution licenses</a> are available</td>
<td>Please contact us.</td>
</tr>
<tr>
<td>Updates</td>
<td>Updated monthly, at the beginning of each month</td>
<td>Updated monthly. For binary format, weekly updates, automated updates available by using geoipupdate program included with<a href="http://www.maxmind.com/app/c">C API</a>
</td>
</tr>
</tbody></table>

<p>ruby 的使用很简单，有一个gem库: <a href="http://geoip.rubyforge.org/">http://geoip.rubyforge.org/</a></p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
</pre></td><td class="code"><pre><code class=""><span class="line">require ‘geoip’
</span><span class="line">c = GeoIP.new(‘GeoIP.dat’).country(‘www.nokia.com’)
</span><span class="line">=&gt; [“www.nokia.com”, “147.243.3.83”, 69, “FI”, “FIN”, “Finland”, “EU”]
</span><span class="line">c.country_code3
</span><span class="line">=&gt; “FIN”
</span><span class="line">c.to_hash
</span><span class="line">=&gt; {:country_code3=&gt;"FIN", :country_name=&gt;"Finland", :continent_code=&gt;"EU",
</span><span class="line">:request=&gt;"www.nokia.com", :country_code=&gt;69, :country_code2=&gt;"FI", :ip=&gt;"147.243.3.83"}
</span><span class="line">
</span><span class="line">
</span><span class="line">c = GeoIP.new(‘GeoLiteCity.dat’).city(‘github.com’)
</span><span class="line">=&gt; [“github.com”, “207.97.227.239”, “US”, “USA”, “United States”, “NA”, “CA”,
</span><span class="line">“San Francisco”, “94110”, 37.7484, -122.4156, 807, 415, “America/Los_Angeles”]
</span><span class="line">&gt;&gt; c.longitude
</span><span class="line">=&gt; -122.4156
</span><span class="line">&gt;&gt; c.timezone
</span><span class="line">=&gt; “America/Los_Angeles”
</span><span class="line">
</span><span class="line">
</span><span class="line">c = GeoIP.new(‘GeoIPASNum.dat’).asn(“www.fsb.ru”)
</span><span class="line">=&gt; [“AS8342”, “RTComm.RU Autonomous System”]</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>我下了一个citylite的免费库，只试了我自己的地址，判断是准确的，还没有找其他的地方进行测试,79%的准确率不高也不低，用作预判断还是可以接受的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[vim window下显示换行符的问题]]></title>
    <link href="http://jonnyzheng.github.com/blog/2011/11/18/vim-window-xia-xian-shi-huan-xing-fu-de-wen-ti/"/>
    <updated>2011-11-18T00:00:00+08:00</updated>
    <id>http://jonnyzheng.github.com/blog/2011/11/18/vim-window-xia-xian-shi-huan-xing-fu-de-wen-ti</id>
    <content type="html"><![CDATA[<p> </p>

<p>关于回车与换行</p>

<p>很久以前，老式的电传打字机使用两个字符来另起新行。一个字符把滑动架移回首位 (称为回车，<cr>，ASCII码为0D)，另一个字符把纸上移一行 (称为换行, <lf>，ASCII码为0A)。当计算机问世以后，存储器曾经非常昂贵。有些人就认定没必要用两个字符来表示行尾。UNIX 开发者决定他们可以用 一个字符来表示行尾，Linux沿袭Unix，也是<lf>。Apple 开发者规定了用<cr>。开发 MS-DOS以及Windows 的那些家伙则决定沿用老式的<cr><lf>。</lf></cr></cr></lf></lf></cr></p>

<p>因为MS-DOS及Windows是回车＋换行来表示换行，因此在Linux下用Vim查看在Windows下用VC写的代码，行尾后的 <code>^M</code> 符号，表示的是符。</p>

<p>在Vim中解决这个问题，很简单，在Vim中利用替换功能就可以将 <code>^M</code> 都干掉，键入如下替换命令行：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">:%s/^M//g</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>注意：上述命令行中的  <code>^M</code> 符，不是 <code>^</code> 再加上 <code>M</code>，而是由 <code>Ctrl+v</code> 、<code>Ctrl+M</code> 键生成的</p>

<p>vim 自动识别换行符</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">set fileformats=unix,dox,mac</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>设置保存格式</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">set fileformat=unix</span></code></pre></td></tr></table></div></figure></notextile></div>

<p> </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[linode 和 Amazon EC2 国内访问速度的比较]]></title>
    <link href="http://jonnyzheng.github.com/blog/2011/09/10/linode--he--amazon-ec2--guo-nei-fang-wen-su-du-de-bi-jiao/"/>
    <updated>2011-09-10T00:00:00+08:00</updated>
    <id>http://jonnyzheng.github.com/blog/2011/09/10/linode&#8211;he&#8211;amazon-ec2&#8211;guo-nei-fang-wen-su-du-de-bi-jiao</id>
    <content type="html"><![CDATA[<p>这两天在看云主机和vps，比较了一下目前的网速:</p>

<p> </p>

<p>AWS 新加坡机房 300ms左右</p>

<p>AWS 日本机房 120ms左右</p>

<p>linode 美国机房 200-300ms左右，不稳定，晚上会慢一点，估计是美国白天的关系。</p>

<p>linode 日本机房 70ms左右，前两天刚从美国迁移过来，速度很不错。</p>

<p>公司香港机房  50 ms 仅做参考</p>

<p>盛大云 (云中书城)  10- 20ms   云中书城是他唯一给出的案例，没法测试别的是否也这么快。</p>

<p>刚申请成功盛大云， ping 新浪的结果是135 ms左右, 而且访问国外速度比较慢，linux下包有时只有8k, 继续试用中。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[长期招募创业伙伴 上海地区]]></title>
    <link href="http://jonnyzheng.github.com/blog/2011/09/10/chang-qi-zhao-mu-chuang-ye-huo-ban---shang-hai-di-qu/"/>
    <updated>2011-09-10T00:00:00+08:00</updated>
    <id>http://jonnyzheng.github.com/blog/2011/09/10/chang-qi-zhao-mu-chuang-ye-huo-ban&#8212;shang-hai-di-qu</id>
    <content type="html"><![CDATA[<p>本人正在进行一个创业计划，如果你是：交互及设计师，前端攻城师，Rails 攻城师 ,最好上海地区，如果能力很强可以外地， 而且希望趁年轻一起做一些疯狂的事情，可以联系我:mars131[at]gmail.com  。</p>

<p>前期以业余时间为主，没有报酬，如果能融资到钱或者项目上线有收入了可以全职，待遇肯定比平均标准高，而且创业伙伴有股份。</p>

<p>目前急需设计师做交互构思和设计，欢迎推荐。</p>

<p>站点: <a title="米十网" href="http://www.riceten.com">www.riceten.com</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Paperclip在development 模式下打印不出convert 命令]]></title>
    <link href="http://jonnyzheng.github.com/blog/2011/09/02/paperclip-zai-development--mo-shi-xia-da-yin-bu-chu-convert--ming-ling/"/>
    <updated>2011-09-02T00:00:00+08:00</updated>
    <id>http://jonnyzheng.github.com/blog/2011/09/02/paperclip-zai-development&#8211;mo-shi-xia-da-yin-bu-chu-convert&#8211;ming-ling</id>
    <content type="html"><![CDATA[<p>今天升级了一下bundle，结果在调试时发现原先可以打印paperclip执行的imagemagick命令，现在却不可以了，网上看了一下，原因是paperclip 调用了 Cocaine插件， 而之前执行命令的log代码已经删掉了，全靠Cocaine输出。</p>

<p>简单的改法:</p>

<p>修改 config/environments/development.rb文件，最后一行加一句:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">Cocaine::CommandLine.logger = Logger.new(STDOUT)</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Git Rebase 后本地commit记录丢失]]></title>
    <link href="http://jonnyzheng.github.com/blog/2011/08/31/git-rebase--hou-ben-di-commit-ji-lu-diu-shi/"/>
    <updated>2011-08-31T00:00:00+08:00</updated>
    <id>http://jonnyzheng.github.com/blog/2011/08/31/git-rebase&#8211;hou-ben-di-commit-ji-lu-diu-shi</id>
    <content type="html"><![CDATA[<p>今天下班前要代码要上测试环境，和另外两个同事一起merge代码，等我merge的时候我发现pull不到更新，于是问他俩，他们竟然都签入到了master里去了，邮件里写的很清楚要签入到分支的，两个人一个都没看邮件，当时不hold住就要吐血了。</p>

<p>OK,  反正可以用rebase,  于是用TortoiseGit的rebase功能把他们在master上的代码merge到当前分支上来，一切搞定后提交测试，结果他俩的代码都正确了，我之前写的功能没有了，再看看代码今天写的东西都没有了，shit, 看来真是hold不住了。</p>

<p>查看log记录，没有push到远程的commit也都不见，难道真的要重写一遍么，还好万能的 Google 救了我。</p>

<p>即使rebase命令已经干掉了上一次push到现在的所有提交记录但是在本地文件里还是有相关信息的，找到项目目录下的git文件 .git\logs\refs\heads\branchname, 打开来看看</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
</pre></td><td class="code"><pre><code class=""><span class="line">0000000000000000000000000000000000000000 f7f3b11f66b709dcd93e1c15825270dce90adc5e jonny &lt;jonny.zheng@lexisnexis.com&gt; 1314676889 +0800	branch: Created from HEAD
</span><span class="line">
</span><span class="line">f7f3b11f66b709dcd93e1c15825270dce90adc5e 74173c185de3ce5ee846bc7e0326481276372071 jonny &lt;jonny.zheng@lexisnexis.com&gt; 1314682422 +0800	commit (amend): init
</span><span class="line">
</span><span class="line">74173c185de3ce5ee846bc7e0326481276372071 93ba66f74b9e11ed8acae3e6ddd1159be1ff9ef4 jonny &lt;jonny.zheng@lexisnexis.com&gt; 1314682760 +0800	commit (merge): Merge branch 'b3.3' of 10.123.4.212:/opt/git/jolnet into b3.3
</span><span class="line">
</span><span class="line">93ba66f74b9e11ed8acae3e6ddd1159be1ff9ef4 9273c7dbd497d070ebd8704f284444f658666954 jonny &lt;jonny.zheng@lexisnexis.com&gt; 1314772033 +0800	commit: 1
</span><span class="line">
</span><span class="line">9273c7dbd497d070ebd8704f284444f658666954 9530c1ca1730ab1c249d3c301817bd037b3f6773 jonny &lt;jonny.zheng@lexisnexis.com&gt; 1314786503 +0800	commit: daily check in
</span><span class="line">
</span><span class="line">9530c1ca1730ab1c249d3c301817bd037b3f6773 c91bb413528815321b10929d9cd26480de64f3bf jonny &lt;jonny.zheng@lexisnexis.com&gt; 1314787003 +0800	commit (amend): daily check in
</span><span class="line">
</span><span class="line">c91bb413528815321b10929d9cd26480de64f3bf 3006dced1c8d39108483927bd5cc1e9ee4d1ec05 jonny &lt;jonny.zheng@lexisnexis.com&gt; 1314788056 +0800	3006dced1c8d39108483927bd5cc1e9ee4d1ec05: updating HEAD
</span><span class="line">
</span><span class="line">3006dced1c8d39108483927bd5cc1e9ee4d1ec05 813acf5e60bc0d2e64c9682fe7498dc79606e1e1 jonny &lt;jonny.zheng@lexisnexis.com&gt; 1314788446 +0800	813acf5e60bc0d2e64c9682fe7498dc79606e1e1: updating HEAD
</span><span class="line">
</span><span class="line">813acf5e60bc0d2e64c9682fe7498dc79606e1e1 ada2680266b192a0ebf8d4a43ca8ca4812aadc78 jonny &lt;jonny.zheng@lexisnexis.com&gt; 1314788695 +0800	ada2680266b192a0ebf8d4a43ca8ca4812aadc78: updating HEAD
</span><span class="line">
</span><span class="line">ada2680266b192a0ebf8d4a43ca8ca4812aadc78 a259bcff43cc726be011efbbeb5975ffafb87ee5 jonny &lt;jonny.zheng@lexisnexis.com&gt; 1314788871 +0800	commit: rebase</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>最后一行是rebase的操作，我只要新建个分支在里面找回前一行commit的代码就可以了。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git checkout -b my_recovery 0800	ada2680266b192a0ebf8d4a43ca8ca4812aadc78</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>方法2（这个更简单）</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">git reflog
</span><span class="line"># Suppose the old commit was HEAD@{5} in the ref log
</span><span class="line">git reset --hard HEAD@{5}</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>终于找回了丢失的代码，可以不用重写一遍了，而且学到了很有用的解决方法，看来犯错也不都是坏事。</p>

<p>最后补一句，还是命令行比较好用，图形化的复杂操作不会用啊。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[windows下为TortoiseGit生成密钥]]></title>
    <link href="http://jonnyzheng.github.com/blog/2011/06/29/windows--wei-tortoisegit-sheng-cheng-mi-yao/"/>
    <updated>2011-06-29T00:00:00+08:00</updated>
    <id>http://jonnyzheng.github.com/blog/2011/06/29/windows&#8211;wei-tortoisegit-sheng-cheng-mi-yao</id>
    <content type="html"><![CDATA[<p>使用TortoiseGit 的时候如果进行远程提交的话使用putty密钥会比较方便，记录一下生成密钥的步骤。</p>

<ol>
  <li>
    <p>下载 putty, putty-key-Generator
putty 是用来连接远程linux server的客户端，putty-key-Generator是用来生成公钥和密钥的。</p>
  </li>
  <li>
    <p>生成公钥密钥
运行  putty-key-Generator，设定生成公钥的长度，一般是1024,2048 .  然后点击Generate按钮，同时鼠标需要在生产区域不停的动，直到密钥生成。
生成好后，key-comment填写 <code>用户名@主机名</code> ，如: <code>git@server1</code></p>
  </li>
  <li>
    <p>Linux 端配置
确保 /etc/ssh/ssh_config文件中下面的配置打开
RSAAuthentication yes
编辑 用户目录下.ssh/authorized_keys, 把第一步生成好的公钥替换掉原来的。
修改权限：</p>
  </li>
</ol>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
</pre></td><td class="code"><pre><code class=""><span class="line">chmod 700 .ssh
</span><span class="line">chmod 600 .ssh/authorized_keys</span></code></pre></td></tr></table></div></figure></notextile></div>

<ol>
  <li>windows端进行连接
使用putty进行连接，connection-&gt;ssh-&gt;auth 里选择第一步保存的私钥， 填写好session信息后登陆。输入login name, 这时使用了私钥就不再需要密码了。</li>
</ol>

<p> </p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mysql 新版本编译参数]]></title>
    <link href="http://jonnyzheng.github.com/blog/2011/06/12/mysql--xin-ban-ben-bian-yi-can-shu/"/>
    <updated>2011-06-12T00:00:00+08:00</updated>
    <id>http://jonnyzheng.github.com/blog/2011/06/12/mysql&#8211;xin-ban-ben-bian-yi-can-shu</id>
    <content type="html"><![CDATA[<p>新版本的mysql 使用了CMAKE作为编译工具，不论这种方法的优缺点，先上编译参数：</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
</pre></td><td class="code"><pre><code class=""><span class="line">cmake . \
</span><span class="line">-DCMAKE_BUILD_TYPE:STRING=Release \
</span><span class="line">-DCMAKE_INSTALL_PREFIX:PATH=/usr/local/mysql \
</span><span class="line">-DDEFAULT_CHARSET:STRING=utf8 \
</span><span class="line">-DDEFAULT_COLLATION:STRING=utf8_general_ci \
</span><span class="line">-DWITH_INNOBASE_STORAGE_ENGINE=1 \
</span><span class="line">-DMYSQL_UNIX_ADDR=/tmp/mysqld.sock \
</span><span class="line">-DCOMMUNITY_BUILD:BOOL=ON \
</span><span class="line">-DENABLED_PROFILING:BOOL=ON \
</span><span class="line">-DENABLE_DEBUG_SYNC:BOOL=OFF \
</span><span class="line">-DINSTALL_LAYOUT:STRING=STANDALONE \
</span><span class="line">-DMYSQL_MAINTAINER_MODE:BOOL=OFF \
</span><span class="line">-DWITH_EMBEDDED_SERVER:BOOL=ON \
</span><span class="line">-DWITH_EXTRA_CHARSETS:STRING=all \
</span><span class="line">-DWITH_SSL:STRING=bundled \
</span><span class="line">-DWITH_UNIT_TESTS:BOOL=OFF \
</span><span class="line">-DWITH_ZLIB:STRING=bundled \
</span><span class="line">-LH</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>具体可参考 <a href="http://forge.mysql.com/wiki/CMake">http://forge.mysql.com/wiki/CMake</a></p>

<p>CMake和configure的命令行参数比较 <a href="http://forge.mysql.com/wiki/CMake#Introduction">http://forge.mysql.com/wiki/CMake#Introduction</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于 find_in_set 的性能问题]]></title>
    <link href="http://jonnyzheng.github.com/blog/2011/06/12/28/"/>
    <updated>2011-06-12T00:00:00+08:00</updated>
    <id>http://jonnyzheng.github.com/blog/2011/06/12/28</id>
    <content type="html"><![CDATA[<p>同事不少数据表设计的时候使用一个字段来存储多对多关系，比如 表 user中有一个字段叫 category, category存储的是 “1,3,9” 这样的类型的数据，实际上是category的id 用逗号分隔开来的。</p>

<p>要查询一个用户属于id为2分类的用户可以这么写</p>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">select * from `user` where find_in_set('2',`user`.`category`)</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>具体find_in_set 的使用请参照手册</p>

<p><a href="http://dev.mysql.com/doc/refman/5.1/en/string-functions.html#function_find-in-set">http://dev.mysql.com/doc/refman/5.1/en/string-functions.html#function_find-in-set</a></p>

<p>虽然这样很好用，但问题是如果数据量大的情况下怎么办，性能会是问题么，手册上有说对find_in_set 做的优化，但在没有索引的情况下他的性能应该是个问题。</p>

<p>于是做了个测试，user 表录入 100万的数据，同时建立 user_category 表，每个user有 3 个分类，那么category表里有300万条记录。</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>[]</span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
</pre></td><td class="code"><pre><code class="sql"><span class="line"><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="o">`</span><span class="n">user_category</span><span class="o">`</span> <span class="p">(</span>
</span><span class="line"> <span class="o">`</span><span class="n">id</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="n">AUTO_INCREMENT</span><span class="p">,</span>
</span><span class="line"> <span class="o">`</span><span class="n">user_id</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">DEFAULT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class="line"> <span class="o">`</span><span class="n">category_id</span><span class="o">`</span> <span class="nb">int</span><span class="p">(</span><span class="mi">11</span><span class="p">)</span> <span class="k">DEFAULT</span> <span class="k">NULL</span><span class="p">,</span>
</span><span class="line"> <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="p">(</span><span class="o">`</span><span class="n">id</span><span class="o">`</span><span class="p">),</span>
</span><span class="line"> <span class="k">KEY</span> <span class="o">`</span><span class="n">category_id</span><span class="o">`</span> <span class="p">(</span><span class="o">`</span><span class="n">category_id</span><span class="o">`</span><span class="p">),</span>
</span><span class="line"> <span class="k">KEY</span> <span class="o">`</span><span class="n">user_id</span><span class="o">`</span> <span class="p">(</span><span class="o">`</span><span class="n">tax_id</span><span class="o">`</span><span class="p">)</span>
</span><span class="line"><span class="p">)</span> <span class="n">ENGINE</span><span class="o">=</span><span class="n">InnoDB</span> <span class="n">AUTO_INCREMENT</span><span class="o">=</span><span class="mi">1</span> <span class="k">DEFAULT</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>现在比较一下在百万级的数据量上使用 join 链接外键查询和find_in_set查询的性能</p>

<h5 id="findinset-22">使用 find_in_set 查询，平均时间在2.2秒左右</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
</pre></td><td class="code"><pre><code class=""><span class="line">SELECT SQL_NO_CACHE COUNT(*) FROM `user` WHERE FIND_IN_SET(65,category)</span></code></pre></td></tr></table></div></figure></notextile></div>

<h5 id="left-join--02">使用left join ， 使用了右表中的索引，平均时间在0.2秒左右</h5>

<div class="bogus-wrapper"><notextile><figure class="code"><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
</pre></td><td class="code"><pre><code class=""><span class="line">SELECT SQL_NO_CACHE COUNT(DISTINCT(`user`.id)) FROM `user`
</span><span class="line">LEFT JOIN `user_category` ON `user`.`id`= `user_category`.`user_id`
</span><span class="line">WHERE `user_category`.`category_id`=75</span></code></pre></td></tr></table></div></figure></notextile></div>

<p>所以在大数据量的情况下还是不适合用find_in_set, 不过有些表的数据可能永远就那么点数据，这个时候为了减少表数量，倒是可以用这样的方法做。</p>
]]></content>
  </entry>
  
</feed>
