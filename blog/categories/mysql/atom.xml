<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Mysql | Jonny Zheng]]></title>
  <link href="http://jonnyzheng.github.com/blog/categories/mysql/atom.xml" rel="self"/>
  <link href="http://jonnyzheng.github.com/"/>
  <updated>2012-08-31T17:21:25+08:00</updated>
  <id>http://jonnyzheng.github.com/</id>
  <author>
    <name><![CDATA[Jonny]]></name>
    <email><![CDATA[mars131@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Mysql 新版本编译参数]]></title>
    <link href="http://jonnyzheng.github.com/blog/2011/06/12/mysql--xin-ban-ben-bian-yi-can-shu/"/>
    <updated>2011-06-12T00:00:00+08:00</updated>
    <id>http://jonnyzheng.github.com/blog/2011/06/12/mysql--xin-ban-ben-bian-yi-can-shu</id>
    <content type="html"><![CDATA[<p>新版本的mysql 使用了CMAKE作为编译工具，不论这种方法的优缺点，先上编译参数：</p>

<p>{% codeblock %}
cmake . \
-DCMAKE_BUILD_TYPE:STRING=Release \
-DCMAKE_INSTALL_PREFIX:PATH=/usr/local/mysql \
-DDEFAULT_CHARSET:STRING=utf8 \
-DDEFAULT_COLLATION:STRING=utf8_general_ci \
-DWITH_INNOBASE_STORAGE_ENGINE=1 \
-DMYSQL_UNIX_ADDR=/tmp/mysqld.sock \
-DCOMMUNITY_BUILD:BOOL=ON \
-DENABLED_PROFILING:BOOL=ON \
-DENABLE_DEBUG_SYNC:BOOL=OFF \
-DINSTALL_LAYOUT:STRING=STANDALONE \
-DMYSQL_MAINTAINER_MODE:BOOL=OFF \
-DWITH_EMBEDDED_SERVER:BOOL=ON \
-DWITH_EXTRA_CHARSETS:STRING=all \
-DWITH_SSL:STRING=bundled \
-DWITH_UNIT_TESTS:BOOL=OFF \
-DWITH_ZLIB:STRING=bundled \
-LH
{% endcodeblock %}</p>

<p>具体可参考 <a href="http://forge.mysql.com/wiki/CMake">http://forge.mysql.com/wiki/CMake</a></p>

<p>CMake和configure的命令行参数比较 <a href="http://forge.mysql.com/wiki/CMake#Introduction">http://forge.mysql.com/wiki/CMake#Introduction</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[关于 find_in_set 的性能问题]]></title>
    <link href="http://jonnyzheng.github.com/blog/2011/06/12/28/"/>
    <updated>2011-06-12T00:00:00+08:00</updated>
    <id>http://jonnyzheng.github.com/blog/2011/06/12/28</id>
    <content type="html"><![CDATA[<p>同事不少数据表设计的时候使用一个字段来存储多对多关系，比如 表 user中有一个字段叫 category, category存储的是 “1,3,9” 这样的类型的数据，实际上是category的id 用逗号分隔开来的。</p>

<p>要查询一个用户属于id为2分类的用户可以这么写</p>

<p>{% codeblock %}
select * from <code>user</code> where find_in_set(‘2’,<code>user</code>.<code>category</code>)
{% endcodeblock %}</p>

<p>具体find_in_set 的使用请参照手册</p>

<p><a href="http://dev.mysql.com/doc/refman/5.1/en/string-functions.html#function_find-in-set">http://dev.mysql.com/doc/refman/5.1/en/string-functions.html#function_find-in-set</a></p>

<p>虽然这样很好用，但问题是如果数据量大的情况下怎么办，性能会是问题么，手册上有说对find_in_set 做的优化，但在没有索引的情况下他的性能应该是个问题。</p>

<p>于是做了个测试，user 表录入 100万的数据，同时建立 user_category 表，每个user有 3 个分类，那么category表里有300万条记录。</p>

<p>{% codeblock [lang:sql]%}
CREATE TABLE <code>user_category</code> (
 <code>id</code> int(11) NOT NULL AUTO_INCREMENT,
 <code>user_id</code> int(11) DEFAULT NULL,
 <code>category_id</code> int(11) DEFAULT NULL,
 PRIMARY KEY (<code>id</code>),
 KEY <code>category_id</code> (<code>category_id</code>),
 KEY <code>user_id</code> (<code>tax_id</code>)
) ENGINE=InnoDB AUTO_INCREMENT=1 DEFAULT 
{% endcodeblock %}</p>

<p>现在比较一下在百万级的数据量上使用 join 链接外键查询和find_in_set查询的性能</p>

<h5 id="findinset-22">使用 find_in_set 查询，平均时间在2.2秒左右</h5>

<p>{% codeblock %}
SELECT SQL_NO_CACHE COUNT(*) FROM <code>user</code> WHERE FIND_IN_SET(65,category)
{% endcodeblock %}</p>

<h5 id="left-join--02">使用left join ， 使用了右表中的索引，平均时间在0.2秒左右</h5>

<p>{% codeblock %}
SELECT SQL_NO_CACHE COUNT(DISTINCT(<code>user</code>.id)) FROM <code>user</code>
LEFT JOIN <code>user_category</code> ON <code>user</code>.<code>id</code>= <code>user_category</code>.<code>user_id</code>
WHERE <code>user_category</code>.<code>category_id</code>=75
{% endcodeblock %}</p>

<p>所以在大数据量的情况下还是不适合用find_in_set, 不过有些表的数据可能永远就那么点数据，这个时候为了减少表数量，倒是可以用这样的方法做。</p>
]]></content>
  </entry>
  
</feed>
