<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rails | Jonny Zheng]]></title>
  <link href="http://jonnyzheng.github.io/blog/categories/rails/atom.xml" rel="self"/>
  <link href="http://jonnyzheng.github.io/"/>
  <updated>2013-07-30T23:27:01+08:00</updated>
  <id>http://jonnyzheng.github.io/</id>
  <author>
    <name><![CDATA[Jonny]]></name>
    <email><![CDATA[mars131@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MarsGeo]]></title>
    <link href="http://jonnyzheng.github.io/blog/2013/06/12/mars-geo/"/>
    <updated>2013-06-12T23:32:00+08:00</updated>
    <id>http://jonnyzheng.github.io/blog/2013/06/12/mars-geo</id>
    <content type="html"><![CDATA[<p>MarsGeo是一个将真实经纬度转换成火星地址的Gem. 我们在做手机App开发时经常会用到地图，通常手机获得的经纬度放到 Google地图的时候会有几百米的偏差，这是因为某些原因国内地图都做了偏移加密，这个俗称火星坐标系。貌似火星坐标是没办法转换成真实的坐标滴，所以一种变通的做法就是把真实经纬度转换成火星坐标系好和Google地图匹配。</p>

<p>MarsGeo是根据网上的一段Java代码翻译过来的，所以具体的算法并不是很了解，，至于准确性如何 我没有全面测试过，不过我自己使用的情况还是挺好的，欢迎大家测试反馈。</p>

<p>具体使用见<a href="https://github.com/jonnyzheng/mars_geo">github</a></p>

<p>顺便说下，如果用的是百度地图的同学是不需要这个Gem的，百度有专门的转换API, 这点百度还是做的挺方便的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails源码学习(active_support:lazy_load_hooks)]]></title>
    <link href="http://jonnyzheng.github.io/blog/2013/05/15/active-support-lazy-load-hooks/"/>
    <updated>2013-05-15T23:42:00+08:00</updated>
    <id>http://jonnyzheng.github.io/blog/2013/05/15/active-support-lazy-load-hooks</id>
    <content type="html"><![CDATA[<p>在rails的initialize代码中经常能看到方法 <code>ActiveSupport.on_load</code>，这个代码是起什么用的引起了我很大的好奇，于是看了看源码，觉得这个功能还是挺好玩而且有用的。</p>

<p><code>ActiveSupport.on_load</code>方法为rails提供了一种叫做 lazy_load_hooks的功能，这个功能可以使很多组件在被用到时才被加载，而不是启动即全部加载，这样大大加快了rails app 的启动速度。</p>

<p>lazy_load_hooks的代码很短，只有不到30行，文件名: <code>activesupport-3.2.x/lib/active_suport/lazy_load_hooks.rb</code></p>

<p>```ruby
module ActiveSupport
  @load_hooks = Hash.new { |h,k| h[k] = [] }
  @loaded = Hash.new { |h,k| h[k] = [] }</p>

<p>def self.on_load(name, options = {}, &amp;block)
    @loaded[name].each do |base|
      execute_hook(base, options, block)
    end
    @load_hooks[name] « [block, options]
  end</p>

<p>def self.execute_hook(base, options, block)
    if options[:yield]
      block.call(base)
    else
      base.instance_eval(&amp;block)
    end
  end</p>

<p>def self.run_load_hooks(name, base = Object)
    @loaded[name] « base
    @load_hooks[name].each do |hook, options|
      execute_hook(base, options, hook)
    end
  end
end</p>

<p>```</p>

<p>代码中会初始化两个Hash变量 <code>@load_hooks</code>和 <code>@loaded</code>, <code>@load_hooks</code>用来存放还没有被执行的blocks, @loaded用来存放已经被加载的载体类。</p>

<p>让我们看看一个ActiveRecord的例子来了解一下lazy_load_hooks的使用方法，在<code>activerecord-3.2.x/lib/active_record/railtie.rb</code>文件中有很多的initializer块，这些内容在rails启动的时候都会被调用到，像下面这个加载logger的：</p>

<p><code>ruby
initializer "active_record.logger" do
    ActiveSupport.on_load(:active_record) { self.logger ||= ::Rails.logger }
end
</code></p>

<p>这时候 <code>ActiveSupport.run_load_hooks</code>还没有执行，所以 on_load方法中<code>@loaded[:active_record]</code>是空的，里面的each循环不会执行，执行到的是</p>

<p><code>ruby
@load_hooks[name] &lt;&lt; [block, options]
</code>
把block放进<code>@load_hooks[:active_record]</code>里面去，所以在railtie里的所有on_load的block都先被存放了起来。</p>

<p>最后的执行是在<code>activerecord-3.2.x/lib/active_record/base.rb</code>文件中，代码的最下面执行到了<code>run_load_hooks</code>方法，</p>

<p><code>ruby
ActiveSupport.run_load_hooks(:active_record, ActiveRecord::Base)
</code>
当加载ActiveRecord::Base执行到该方法，并且把<code>ActiveRecord::Base</code>作为载体类传了进去。所以在ActiveRecord::Base被加载的时候所有的lazy_load block才会被执行到，同样的其他模块中的railite里也有很多lazy_load block，他们都是在需要的时候才被执行，这样又节省运行资源，又节省启动时间，我们自己写Gem的时候也可以用上啦。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 源码学习3 (Application,Engine,Railtie)]]></title>
    <link href="http://jonnyzheng.github.io/blog/2013/04/29/reading-rails-3/"/>
    <updated>2013-04-29T13:05:00+08:00</updated>
    <id>http://jonnyzheng.github.io/blog/2013/04/29/reading-rails-3</id>
    <content type="html"><![CDATA[<p>在第一篇<a href="http://jonnyzheng.github.com/blog/2012/07/15/reading-rails-1/">Rails 的初始化过程</a>里讲到rails的启动命令是在 <code>railties/lib/rails/commands/server.rb</code> 里执行的，其实这里的server类是继承自<code>Rack::Server</code>的，从这里就可以看出rails是一个rack app，rack 连接了Rails应用和 WebServer, 现在让我们再深入进去看看rails的各个组件是如何被整合在一起的。</p>

<p>在 Rails::Server类里一些方法被覆写，用于加载rails自己的config环境，middleware等：</p>

<p>```ruby
# 覆盖了rack的middleware 方法，加载了3个middleware app
def middleware
      middlewares = []
      middlewares « [Rails::Rack::LogTailer, log_path] unless options[:daemonize]
      middlewares « [Rails::Rack::Debugger]  if options[:debugger]
      middlewares « [::Rack::ContentLength]
      Hash.new(middlewares)
end</p>

<h1 id="rackconfigru-">默认端口改成3000，定义了rack的启动文件config.ru, 还有一些默认配置</h1>
<p>def default_options
      super.merge({
        :Port        =&gt; 3000,
        :environment =&gt; (ENV[‘RAILS_ENV’] || “development”).dup,
        :daemonize   =&gt; false,
        :debugger    =&gt; false,
        :pid         =&gt; File.expand_path(“tmp/pids/server.pid”),
        :config      =&gt; File.expand_path(“config.ru”)
      })
end
```</p>

<h2 id="rails-configru">rails项目里的 config.ru</h2>
<p>rack最后会执行config.ru,然后看看rails项目的根目录下config.ru里是如何写的</p>

<p>```ruby
#引用了config下面的 enviroment.rb 
require ::File.expand_path(‘../config/environment’,  <strong>FILE</strong>)</p>

<h1 id="railsstudyrailsrun-application">RailsStudy是我的rails的项目名称，这里的工作就是run 这个Application</h1>
<p>run RailsStudy::Application
```
我们的Rails代码就是在这一步开始被调用到的  </p>

<p>下面来看看 <code>config/application.rb</code> 这个文件</p>

<p>```ruby
require File.expand_path(‘../boot’, <strong>FILE</strong>)</p>

<p>require ‘rails/all’</p>

<p>if defined?(Bundler)
  # If you precompile assets before deploying to production, use this line
  Bundler.require(*Rails.groups(:assets =&gt; %w(development test)))
  # If you want your assets lazily compiled in production, use this line
  # Bundler.require(:default, :assets, Rails.env)
end</p>

<p>module RailsStudy
  class Application &lt; Rails::Application
    # Settings in config/environments/* take precedence over those specified here.
    # Application configuration should go into files in config/initializers
    # – all .rb files in that directory are automatically loaded.</p>

<pre><code># Custom directories with classes and modules you want to be autoloadable.
# config.autoload_paths += %W(#{config.root}/extras)

# Only load the plugins named here, in the order given (default is alphabetical).
# :all can be used as a placeholder for all plugins not explicitly named.
# config.plugins = [ :exception_notification, :ssl_requirement, :all ]

# Activate observers that should always be running.
# config.active_record.observers = :cacher, :garbage_collector, :forum_observer

# Set Time.zone default to the specified zone and make Active Record auto-convert to this zone.
# Run "rake -D time" for a list of tasks for finding time zone names. Default is UTC.
# config.time_zone = 'Central Time (US &amp; Canada)'

# The default locale is :en and all translations from config/locales/*.rb,yml are auto loaded.
# config.i18n.load_path += Dir[Rails.root.join('my', 'locales', '*.{rb,yml}').to_s]
config.i18n.default_locale = "zh-CN"

# Configure the default encoding used in templates for Ruby 1.9.
config.encoding = "utf-8"

# Configure sensitive parameters which will be filtered from the log file.
config.filter_parameters += [:password]

# Enable escaping HTML in JSON.
config.active_support.escape_html_entities_in_json = true

# Use SQL instead of Active Record's schema dumper when creating the database.
# This is necessary if your schema can't be completely dumped by the schema dumper,
# like if you have constraints or database-specific column types
# config.active_record.schema_format = :sql

# Enforce whitelist mode for mass assignment.
# This will create an empty whitelist of attributes available for mass-assignment for all models
# in your app. As such, your models will need to explicitly whitelist or blacklist accessible
# parameters by using an attr_accessible or attr_protected declaration.
config.active_record.whitelist_attributes = true

# Enable the asset pipeline
config.assets.enabled = true

# Version of your assets, change this if you want to expire all your assets
config.assets.version = '1.0'   end end ``` 这是一个默认的application文件，基本没有修改里面的内容. 在rails项目里application文件的作用主要是做一些初始化的设置，比如时区，i18n等等。
</code></pre>

<p><code>RailsStudy::Application</code> 类是继承自 <code>Rails::Application</code>,然后我们去看看这个文件在哪里</p>

<h2 id="railtieslibrailsapplicationrb">railties/lib/rails/application.rb</h2>

<p>application文件里做了详细的介绍 Application的功能：</p>

<ul>
  <li>
    <p>Initialization:<br />
 Rails::Application负责执行所有的railties,engines,plugin的 initializer, 并且也执行
 bootstrap initializer 和 finishing initializer</p>
  </li>
  <li>
    <p>Configureation:<br />
负责设置App的config，其中包含了 Rails::Engine和Rails::Railtie的config</p>
  </li>
  <li>
    <p>Routes:<br />
负责管理routes,当文件改变的时候reload所有的routes</p>
  </li>
  <li>
    <p>Middlewares:<br />
 负责构建middlewares的堆栈</p>
  </li>
  <li>
    <p>Booting process:<br />
负责按照启动顺序启动和执行程序，大致程序如下</p>
    <ol>
      <li>require “config/boot.rb” to setup load paths</li>
      <li>require railties and engines</li>
      <li>Define Rails.application as “class MyApp::Application &lt; Rails::Application”</li>
      <li>Run config.before_configuration callbacks</li>
      <li>Load config/environments/ENV.rb</li>
      <li>Run config.before_initialize callbacks</li>
      <li>Run Railtie#initializer defined by railties, engines and application.</li>
      <li>One by one, each engine sets up its load paths, routes and runs its config/initializers/* files.</li>
      <li>Custom Railtie#initializers added by railties, engines and applications are executed</li>
      <li>Build the middleware stack and run to_prepare callbacks</li>
      <li>Run config.before_eager_load and eager_load if cache classes is true</li>
      <li>Run config.after_initialize callbacks</li>
    </ol>
  </li>
</ul>

<p>这里先介绍一下application的功能，到最后我们再去看代码，接下来先看看Railtie。  </p>

<h2 id="railtieslibrailsrailtierb">railties/lib/rails/railtie.rb</h2>

<p>Rails::Application &lt; Rails::Engine &lt; Rails::Railtie  </p>

<p>Railties 是rails framework的核心，用来提供各种回调方法以及扩展，或者修改初始化的process. 实际上每个rails组件(ActionMailer,Action Controller)都是一个railtie, 每个组件都有自己的初始化代码，这样rails就不用去专门把初始化工作都自己来做，只要在正确的时候调用各组件的初始化代码就可以了。</p>

<p>Railtie的代码其实很短，只有100多行，类中一开始就引用了下面几个模块：</p>

<p>```ruby
autoload :Configurable,  “rails/railtie/configurable”
autoload :Configuration, “rails/railtie/configuration”</p>

<p>include Initializable
```</p>

<h4 id="configurable--configuration">Configurable &amp; Configuration</h4>
<p>rails/railtie/configurable 中的类方法moudule中定义了 instance方法，并且将 @instance的config 方法代理给了include自己的类，</p>

<p>```ruby
module Rails
  class Railtie
    module Configurable
      extend ActiveSupport::Concern</p>

<pre><code>  module ClassMethods
      
    delegate :config, :to =&gt; :instance

    def inherited(base)
      raise "You cannot inherit from a #{self.superclass.name} child"
    end

    def instance
      @instance ||= new
    end

    ...
  end
end   end end ```
</code></pre>

<p>这里的@instance有可能是Railtie，Engine,Application类的实例，他们都有自己的config方法实现,方法里基本上都是生成了自己的Configuration实现，这些Configuration类也是依次的继承关系:
<code>Application::Configuration &lt; Engine::Configuration &lt; Railtie::Configuration</code></p>

<h4 id="initializable">Initializable</h4>

<p>railties/lib/rails/rails/initializable.rb 中定义了Module Rails::Initializable, 所有include了该Module的类都拥有了 <code>initializer</code>,<code>initializers</code>,<code>initializers_chain</code> 等类方法，<code>initializer</code> 方法帮助类可以定义一个或多个自己的 initializer, 并且通过<code>initializers</code>,<code>initializers_chain</code>来获取他们。</p>

<p>比如用来加载i18n的本地化文件路径:</p>

<p><code>ruby
initializer :add_locales do
  config.i18n.railties_load_path.concat(paths["config/locales"].existent)
end
</code></p>

<p><code>ruby
def initializer(name, opts = {}, &amp;blk)
        raise ArgumentError, "A block must be passed when defining an initializer" unless blk
        opts[:after] ||= initializers.last.name unless initializers.empty? || initializers.find { |i| i.name == opts[:before] }
        initializers &lt;&lt; Initializer.new(name, nil, opts, &amp;blk)
end
</code></p>

<p>在方法中会生成一个<code>Initializer</code>的实例，然后加入到<code>@initializers</code>变量中，最后会在Application类中的initialize!方法中会被执行。</p>

<h2 id="railtieslibrailsenginerb">railties/lib/rails/engine.rb</h2>

<p>Rails::Engine用来生成一个简单的Rails应用的子集，打包成通用的程序供不同的Rails项目使用。
从Rails 3.0开始Rails应用就是一个Engine, 实际上Application类是继承自Engine类的。</p>

<p>我们写的Gem包也可以是一个Engine应用，里面可以包含自己的controller,model,view文件，文件结构也可以和rails的文件结构一样，这样的构架很方便做一些通用的功能包，为减少重复代码提供了极大的方便。Engine本身还是有很多内容可以说的，关于如何应用他可以看看这个教程：<a href="http://guides.rubyonrails.org/engines.html">Getting Started with Engines</a>。</p>

<p>再回过头来看代码，首先 Engine类是继承于 Railtie 的，也就是拥有了Railtie类的基本功能，但同时Engine类也扩展了自己的configuration类，这里主要为一个Engine定义了他的文件结构：</p>

<p>railties/lib/rails/engine/configuration.rb</p>

<p><code>ruby
      def paths
        @paths ||= begin
          paths = Rails::Paths::Root.new(@root)
          paths.add "app",                 :eager_load =&gt; true, :glob =&gt; "*"
          paths.add "app/assets",          :glob =&gt; "*"
          paths.add "app/controllers",     :eager_load =&gt; true
          paths.add "app/helpers",         :eager_load =&gt; true
          paths.add "app/models",          :eager_load =&gt; true
          paths.add "app/mailers",         :eager_load =&gt; true
          paths.add "app/views"
          paths.add "lib",                 :load_path =&gt; true
          paths.add "lib/assets",          :glob =&gt; "*"
          paths.add "lib/tasks",           :glob =&gt; "**/*.rake"
          paths.add "config"
          paths.add "config/environments", :glob =&gt; "#{Rails.env}.rb"
          paths.add "config/initializers", :glob =&gt; "**/*.rb"
          paths.add "config/locales",      :glob =&gt; "*.{rb,yml}"
          paths.add "config/routes",       :with =&gt; "config/routes.rb"
          paths.add "db"
          paths.add "db/migrate"
          paths.add "db/seeds",            :with =&gt; "db/seeds.rb"
          paths.add "vendor",              :load_path =&gt; true
          paths.add "vendor/assets",       :glob =&gt; "*"
          paths.add "vendor/plugins"
          paths
        end
      end
</code></p>

<p>railties/lib/rails/engine/railties.rb</p>

<p>Engine的Railties类是用来获取相关的railties，如self.railies方法可以获得当前环境下所有
继承了<code>::Rails::Railtie</code> 的类的实例, self.engines则可以得到所有继承<code>::Rails::Engine</code>
的实例。</p>

<p>回到engine.rb, 这里定义了很多initializer,大部分的initializer是用来查看并加载所需要的文件用的。</p>

<p><code>
set_autoload_paths #设置需要自动load的文件路径
add_routing_paths #如果routes文件存在则load相关文件
add_locales  #如果本地化文件存在则load相关文件
load_config_initializers #如果有initializer文件存在则load相关文件
</code></p>

<h2 id="railtieslibrailsapplicationrb-1">railties/lib/rails/application.rb</h2>

<p>了解完Engine后再来看看Application的代码, 首先是</p>

<p>```ruby
class Application &lt; Engine
    autoload :Bootstrap,      ‘rails/application/bootstrap’
    autoload :Configuration,  ‘rails/application/configuration’
    autoload :Finisher,       ‘rails/application/finisher’
    autoload :Railties,       ‘rails/application/railties’
    autoload :RoutesReloader, ‘rails/application/routes_reloader’</p>

<pre><code>... end     ```
</code></pre>

<p>rails/application/bootstrap 定义启动是最开始需要加载的initializers,比如加载Logger,加载ActiveSupport的所有功能。</p>

<p>rails/application/configuration 是继承于 ::Rails::Engine::Configuration，这里他提供了一个Rails Application所需要的更多config options:</p>

<p>```ruby
module Rails
  class Application
    class Configuration &lt; ::Rails::Engine::Configuration
      attr_accessor :allow_concurrency, :asset_host, :asset_path, :assets,
                    :cache_classes, :cache_store, :consider_all_requests_local,
                    :dependency_loading, :exceptions_app, :file_watcher, :filter_parameters,
                    :force_ssl, :helpers_paths, :logger, :log_tags, :preload_frameworks,
                    :railties_order, :relative_url_root, :reload_plugins, :secret_token,
                    :serve_static_assets, :ssl_options, :static_cache_control, :session_options,
                    :time_zone, :reload_classes_only_on_change, :whiny_nils</p>

<p>…
end
```</p>

<p>更多的paths:</p>

<p>```ruby
 def paths
        @paths ||= begin
          paths = super
          paths.add “config/database”,    :with =&gt; “config/database.yml”
          paths.add “config/environment”, :with =&gt; “config/environment.rb”
          paths.add “lib/templates”
          paths.add “log”,                :with =&gt; “log/#{Rails.env}.log”
          paths.add “public”
          paths.add “public/javascripts”
          paths.add “public/stylesheets”
          paths.add “tmp”
          paths
        end
      end</p>

<p>```</p>

<p>rails/application/finisher.rb 用来定义在启动完成前需要加载的initializers
rails/application/railties.rb 用来获得所有的railties，包括engines,plugins,railties。
rails/application/routes_reloader.rb 用来提供检测文件改动和reload routes的功能。</p>

<p>initialize!方法在每个Rails项目的config/enviroment.rb中被调用到，这时会真正的执行所有定义好
的initializers</p>

<p><code>ruby
def initialize!(group=:default) #:nodoc:
    raise "Application has been already initialized." if @initialized
    run_initializers(group, self)
    @initialized = true
    self
end
</code></p>

<p>每一个initializer最后在 Rails::Initializable::Initializer类的run方法中被执行到：</p>

<p><code>ruby
def run(*args)
    @context.instance_exec(*args, &amp;block)
end
</code></p>

<p>default_middleware_stack方法为rails程序加载默认的middleware, 该方法在Engine类的<code>app</code>方法中被调用到。</p>

<p>```ruby</p>

<p>def default_middleware_stack
      ActionDispatch::MiddlewareStack.new.tap do |middleware|
        if rack_cache = config.action_controller.perform_caching &amp;&amp; config.action_dispatch.rack_cache
          require “action_dispatch/http/rack_cache”
          middleware.use ::Rack::Cache, rack_cache
        end</p>

<pre><code>    if config.force_ssl
      require "rack/ssl"
      middleware.use ::Rack::SSL, config.ssl_options
    end

    if config.serve_static_assets
      middleware.use ::ActionDispatch::Static, paths["public"].first, config.static_cache_control
    end

    middleware.use ::Rack::Lock unless config.allow_concurrency
    middleware.use ::Rack::Runtime
    middleware.use ::Rack::MethodOverride
    middleware.use ::ActionDispatch::RequestId
    middleware.use ::Rails::Rack::Logger, config.log_tags # must come after Rack::MethodOverride to properly log overridden methods
    middleware.use ::ActionDispatch::ShowExceptions, config.exceptions_app || ActionDispatch::PublicExceptions.new(Rails.public_path)
    middleware.use ::ActionDispatch::DebugExceptions
    middleware.use ::ActionDispatch::RemoteIp, config.action_dispatch.ip_spoofing_check, config.action_dispatch.trusted_proxies

    if config.action_dispatch.x_sendfile_header.present?
      middleware.use ::Rack::Sendfile, config.action_dispatch.x_sendfile_header
    end

    unless config.cache_classes
      app = self
      middleware.use ::ActionDispatch::Reloader, lambda { app.reload_dependencies? }
    end

    middleware.use ::ActionDispatch::Callbacks
    middleware.use ::ActionDispatch::Cookies

    if config.session_store
      if config.force_ssl &amp;&amp; !config.session_options.key?(:secure)
        config.session_options[:secure] = true
      end
      middleware.use config.session_store, config.session_options
      middleware.use ::ActionDispatch::Flash
    end

    middleware.use ::ActionDispatch::ParamsParser
    middleware.use ::ActionDispatch::Head
    middleware.use ::Rack::ConditionalGet
    middleware.use ::Rack::ETag, "no-cache"

    if config.action_dispatch.best_standards_support
      middleware.use ::ActionDispatch::BestStandardsSupport, config.action_dispatch.best_standards_support
    end
  end
end
</code></pre>

<p>```</p>

<p>嗯，基本上就是这回所有的内容了，总结一下： Railtie为所有rails组件提供了和Rails整合的接口，使他们可以定义自己的初始化内容，可以有自己的配置。 Engine继承于Railtie, 提供了一个功能最小化的Rails文档结构，Application继承于Engine, 在Engine的基础上定义了一个完整Rails所需要的Initializers和middleware,同时在启动时负责加载Rails程序中其他组件的所有Initializers。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rails 源码学习 2 (Rack and Webrick)]]></title>
    <link href="http://jonnyzheng.github.io/blog/2012/09/09/reading-rails-2/"/>
    <updated>2012-09-09T21:33:00+08:00</updated>
    <id>http://jonnyzheng.github.io/blog/2012/09/09/reading-rails-2</id>
    <content type="html"><![CDATA[<h3 id="rack">先来一个rack程序的简单例子</h3>

<p>```ruby
require ‘rubygems’
require ‘rack’</p>

<p>class HelloWorld
  def call(env)
    return [200, {}, [“Hello world!”]]
  end
end</p>

<p>Rack::Handler::WEBrick.run(HelloWorld.new,:Port =&gt; 9000)
```</p>

<p><code>HelloWorld</code> 方法里定义了一个call方法，call方法只有一个参数env, 方法会return一个数组，里面包含了http请求的response. 运行一下这个文件看看：</p>

<p><code>ruby
$ ruby myserver.rb
[2012-08-24 12:24:28] INFO  WEBrick 1.3.1
[2012-08-24 12:24:28] INFO  ruby 1.9.3 (2012-04-20) [x86_64-darwin11.4.0]
[2012-08-24 12:24:28] INFO  WEBrick::HTTPServer#start: pid=17920 port=9000
</code>
我们通过 WebBrick的run方法启动WebBrick Server, 并且传递了HelloWorld的实例， 现在端口在9000, 打开网页访问 <code>http://localhost:9000</code> 就会看到页面里显示的是 <code>Hello world!</code>.</p>

<h3 id="rackup">rackup</h3>
<p>rack 本身就提供了一个 rackup 工具， 我们可以用rackup工具启动一个文件，不过这个文件要是 .ru后缀结尾的，默认名称是config.ru, 这个文件是不是很眼熟, 其实在每个rails项目的根目录下都有这个文件。让我们来写一个config.ru文件</p>

<p><code>ruby
run Proc.new {|env| [200, {"Content-Type" =&gt; "text/html"}, ["Hello Rack!"]]}
</code></p>

<p>好了，在文件目录里运行一下</p>

<p><code>ruby
$ rackup config.ru
[2012-08-24 14:56:34] INFO  WEBrick 1.3.1
[2012-08-24 14:56:34] INFO  ruby 1.9.3 (2012-04-20) [x86_64-darwin11.4.0]
[2012-08-24 14:56:34] INFO  WEBrick::HTTPServer#start: pid=18286 port=9292
</code> 
这回是绑定在9292端口，rack的默认端口上。</p>

<h3 id="middleware">middleware</h3>

<p>rack 的middleware 提供对任何请求的filter功能，比如我们可以为每次请求记录log, 给每个html页面里加入一些信息，有了middleware接口，
实现起来就非常方便了，而且我们可以堆叠所有的middleware,每一个middleware处理完后传给下一个，直到没有middleware了才会把结果输出出来,
把上面的例子再改一改，为每次输出里面都增加一个字符串：</p>

<p>```ruby
class InsertName
    def initialize(app)
      @app = app
    end</p>

<pre><code>def call(env)
  status, headers, response = @app.call(env)
  [status,headers, [response[0]+ ' jonny']]
end  end
</code></pre>

<p>use InsertName</p>

<p>run Proc.new {|env| [200, {“Content-Type” =&gt; “text/html”}, [“Hello Rack!”]]}
```</p>

<p>重新用rackup启动，访问 localhost:9292， 会看到结果是 <code>Hello Rack! jonny</code></p>

<p>middleware的应用非常灵活强大，rails的很多功能都是基于rack middleware实现的，在rails项目下输入
<code>rack middleware</code> 会列出项目用到的所有middleware, 下面是我的一个项目的middleware列表：</p>

<p><code>ruby
use ActionDispatch::Static
use Rack::Lock
use #&lt;ActiveSupport::Cache::Strategy::LocalCache::Middleware:0x007facbb14adb0&gt;
use Rack::Runtime
use Rack::MethodOverride
use ActionDispatch::RequestId
use Rails::Rack::Logger
use ActionDispatch::ShowExceptions
use ActionDispatch::DebugExceptions
use ActionDispatch::RemoteIp
use ActionDispatch::Reloader
use ActionDispatch::Callbacks
use ActiveRecord::ConnectionAdapters::ConnectionManagement
use ActiveRecord::QueryCache
use ActionDispatch::Cookies
use ActionDispatch::Session::CookieStore
use ActionDispatch::Flash
use ActionDispatch::ParamsParser
use ActionDispatch::Head
use Rack::ConditionalGet
use Rack::ETag
use ActionDispatch::BestStandardsSupport
use Warden::Manager
use OmniAuth::Strategies::Weibo
run Opinion::Application.routes
</code></p>

<h3 id="rack-handler">rack handler</h3>

<p>rack handler 是rack链接server的桥梁，rack 库自带了很多server端的handler, 我们用webrick的handler做示例，在第一个例子里我们就是用的handler启动的Webrick server：
<code>Rack::Handler::WEBrick.run(HelloWorld.new,:Port =&gt; 9000)</code></p>

<ul>
  <li>rack/lib/rack/handler/webrick.rb</li>
</ul>

<p>```ruby
module Rack
  module Handler
    class WEBrick &lt; ::WEBrick::HTTPServlet::AbstractServlet
	  def self.run(app, options={})
        options[:BindAddress] = options.delete(:Host) if options[:Host]
        @server = ::WEBrick::HTTPServer.new(options)
        @server.mount “/”, Rack::Handler::WEBrick, app
        yield @server  if block_given?
        @server.start
      end</p>

<pre><code>  ...
</code></pre>

  	end
<p>end
end
```
WEBrick类是继承于 <code>WEBrick::HTTPServlet::AbstractServlet</code> 这个类的，在 <code>self.run</code> 方法中首先是 new 了一个 WEBrick::HTTPServer，server的mount方法 加载了WEBrick handler类，接下来server处理完block里面的内容后进行启动，看来所有的操作都是 <code>WEBrick::HTTPServer</code> 类完成的，下面就到这个类的源码里看看。</p>

<p>Webrick是ruby的标准函数库，不在gems目录里，我的机器上在 <code>.rvm/rubies/ruby-1.9.3-p194/lib/ruby/1.9.1/webrick</code> 目录下面：</p>

<ul>
  <li>webrick/httpserver.rb</li>
</ul>

<p>```ruby
class HTTPServer &lt; ::WEBrick::GenericServer
    def initialize(config={}, default=Config::HTTP)
      super(config, default)
      @http_version = HTTPVersion::convert(@config[:HTTPVersion])</p>

<pre><code>  @mount_tab = MountTable.new
  if @config[:DocumentRoot]
    mount("/", HTTPServlet::FileHandler, @config[:DocumentRoot],
          @config[:DocumentRootOptions])
  end

  unless @config[:AccessLog]
    @config[:AccessLog] = [
      [ $stderr, AccessLog::COMMON_LOG_FORMAT ],
      [ $stderr, AccessLog::REFERER_LOG_FORMAT ]
    ]
  end

  @virtual_hosts = Array.new
end

... end ```
</code></pre>

<p>父类GenericServer主要做了一些config初始化，端口绑定的工作，mount serverlet 到 相应的路径。</p>

<p>然后看看 <code>start</code> 方法, httpserver里并没有start方法，而是调用了父类的start：</p>

<p>```ruby
def start(&amp;block)
      raise ServerError, “already started.” if @status != :Stop
      server_type = @config[:ServerType] || SimpleServer</p>

<pre><code>  server_type.start{
    @logger.info \
      "#{self.class}#start: pid=#{$$} port=#{@config[:Port]}"
    call_callback(:StartCallback)

    thgroup = ThreadGroup.new
    @status = :Running
    while @status == :Running
      begin
        if svrs = IO.select(@listeners, nil, nil, 2.0)
          svrs[0].each{|svr|
            @tokens.pop          # blocks while no token is there.
            if sock = accept_client(svr)
              sock.do_not_reverse_lookup = config[:DoNotReverseLookup]
              th = start_thread(sock, &amp;block)
              th[:WEBrickThread] = true
              thgroup.add(th)
            else
              @tokens.push(nil)
            end
          }
        end
      rescue Errno::EBADF, IOError =&gt; ex
        # if the listening socket was closed in GenericServer#shutdown,
        # IO::select raise it.
      rescue Exception =&gt; ex
        msg = "#{ex.class}: #{ex.message}\n\t#{ex.backtrace[0]}"
        @logger.error msg
      end
    end

    @logger.info "going to shutdown ..."
    thgroup.list.each{|th| th.join if th[:WEBrickThread] }
    call_callback(:StopCallback)
    @logger.info "#{self.class}#start done."
    @status = :Stop
  } end ```
</code></pre>

<p>start方法内通过@status 状态一直做循环监听，如果有请求就进入处理过程，在start_thread方法中调用httpserver 的 run方法, run方法种初始化了 <code>HTTPResponse</code> 和 <code>HTTPRequest</code> 最后传递给了service方法</p>

<p>```ruby
    def service(req, res)
      if req.unparsed_uri == “*”
        if req.request_method == “OPTIONS”
          do_OPTIONS(req, res)
          raise HTTPStatus::OK
        end
        raise HTTPStatus::NotFound, “`#{req.unparsed_uri}’ not found.”
      end</p>

<pre><code>  servlet, options, script_name, path_info = search_servlet(req.path)
  raise HTTPStatus::NotFound, "`#{req.path}' not found." unless servlet
  req.script_name = script_name
  req.path_info = path_info
  si = servlet.get_instance(self, *options)
  @logger.debug(format("%s is invoked.", si.class.name))
  si.service(req, res)
end ```
</code></pre>

<p>servlet 变量就是之前在webrick handler里mount的类名，在这里取回来后通过 <code>servlet.get_instance</code> 创建了 <code>Rack::Handler::WEBrick</code> 实例，
最终实例调用自己的service方法，我们又回到了 webrick handler 里面：</p>

<p><code>ruby
def service(req, res)
  ...
  status, headers, body = @app.call(env)
  ...
end
</code></p>

<p>在这里我们一开始传进去的app被调用到，并返回对应的内容，到此为止一个request通过rack 再到WebBrick的处理完成.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[carrierwave uploader 中传递变量]]></title>
    <link href="http://jonnyzheng.github.io/blog/2012/08/31/carrierwave-pass-params/"/>
    <updated>2012-08-31T16:29:00+08:00</updated>
    <id>http://jonnyzheng.github.io/blog/2012/08/31/carrierwave-pass-params</id>
    <content type="html"><![CDATA[<p>在carrierwave uploader中经常会用到version的功能，一般我们的写法都是在里面写死process的一些参数，比如</p>

<p><code>ruby
  version :small do
    process :resize_to_fill =&gt; [48,48]
  end
</code></p>

<p>但是有的时候可能我们需要动态的传递一些参数进来对图片做相应的操作，比如用户在前端选择图片的头像区域，然后传到后台进行切割，这个时候需要加一个process方法, 下面的crop_area方法通过参数来截取图片中对应的区域。</p>

<p><code>ruby
 def crop_area
    manipulate! do |img|
      ...
    end
  end
</code></p>

<p>但是参数如何传进来成了问题，起初我是在 Uploader里定义了一个可访问的变量,然后在controller里将参数传递给Uploader实例，结果在crop_area里根本就访问不到Uploader里的实例变量，后来看了下源码发现carrierwave的实现逻辑貌似不能用这样的方法。于是用了一个曲线救国的方法，通过Model来传递参数：</p>

<p>```ruby
# model class
# define attr_accessor coords
class User &lt; ActiveRecord::Base
  attr_accessor :coords
  mount_uploader :icon, AvatarUploader
end</p>

<h1 id="controller">controller</h1>
<p># pass the params to @user.coords
def crop_icon
  @user.coords = params[:coords]
  @user.icon = File.open(path)
  @user.save
  redirect_to :action=&gt; ‘basic’
end</p>

<h1 id="uploader">Uploader</h1>
<p># the model in the function is same as @user in controll,
# and can be invoked inside of process method 
 def crop_area
    manipulate! do |img|
      unless model.coords.nil?
        coords = JSON.parse(model.coords)
        img.crop(“#{coords[‘w’]}x#{coords[‘h’]}+#{coords[‘x’]}+#{coords[‘y’]}”)
      end
      img = yield(img) if block_given?
      img
    end
  end
```</p>

<p>所以最后通过在 Model 中设置实例变量解决动态传递参数的问题。</p>
]]></content>
  </entry>
  
</feed>
